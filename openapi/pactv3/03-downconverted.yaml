openapi: 3.0.3
info:
  title: PACT API Specification
  summary: Technical Specifications for PCF Data Exchange
  version: 3.0.1
  contact:
    name: WBCSD PACT Project
    url: https://github.com/wbcsd
    email: pact@wbcsd.org
  description: >
    This document describes the technical specifications for the exchange of 

    Product Carbon Footprint (PCF) data between systems. The specification is 

    maintained by the WBCSD PACT project and intended to be used by
    organizations 

    that wish to exchange PCF data with other organizations. The specifications 

    are designed to be technology-agnostic.
  x-rule: >
    SHALL = Required to report on

    BIO = Required if biogenic and land sector related emissions are applicable,
    0 if not applicable, blank if unknown or unavailable

    BIO-2027 = Required by 31/12/2027 if biogenic and land sector related
    emissions are applicable , 0 if not applicable, blank if unknown or
    unavalaible

    CCU = Required if CCU applicable and data known and available, blank
    otherwise

    CCS = Required if CCS applicable and data known and available, blank
    otherwise

    SHOULD = Recommended to report on in, exceptions possible

    MAY = Optional


    https://www.iso.org/foreword-supplementary-information.html
  x-methodology-sections:
    3.1.2: Hierarchy of application
    '3.2': Scope and boundary
    3.2.2: Focus on GHG emissions
    3.2.3: Scope and boundary of the PACT Methodology
    3.2.4: Unit of analysis
    3.3.1: Calculation of product GHG emissions
    3.3.1.1: Data identification
    3.3.1.2: Criteria to exclude certain activities - Exemption rules
    3.3.2.1: Accounting for transportation and distribution emissions
    3.3.2.2: >-
      Accounting for waste treatment and recycling emissions within the
      Cradle-to-Gate boundary
    3.3.2.4: Accounting for biogenic emissions and removals
    3.3.2.5: Technological CO2 capture, storage and use
    3.3.1.3: Allocation
    4.2.2: Primary Data Share
    4.2.3: Data quality indicators (DQIs) assessment
tags:
  - name: footprint
    description: Synchronous retrieval of footprints
  - name: event
    description: >-
      Asynchronous Event API. This API is used to post events to the system.
      Data recipients can request footprints and will receive notifications when
      these requests are fulfilled or rejected. Data owners can post updated and
      newly published footprints to data recipients.
servers:
  - url: https://example.com
components:
  schemas:
    ProductFootprint:
      description: >
        `ProductFootprint` is a data type which represents the carbon footprint

        of a product under a specific scope ([[#dt-carbonfootprint-scope]])

        and with values calculated in accordance with the [=PACT Methodology=].


        The objective of a `ProductFootprint` is to provide interoperability
        between

        the creator (the [=data owner=]) and the consumer (the [=data
        recipient=]) of

        ProductFootprints. The details on the exchange of ProductFootprints are

        specified in [[#api]].


        Conceptually, the data type <{ProductFootprint}> is modeled as a
        multi-purpose

        container for product-specific emission factors which is supported by

        extensibility through [=Data Model Extensions=].


        Data Model Extensions enable [=data owners=] to exchange additional
        information

        related to a product with [=data recipients=]. The details are specified

        in [[#datamodelextension]] as well as [[!EXTENSIONS-GUIDANCE]], and
        [[!DATA-MODEL-EXTENSIONS]].


        Each `ProductFootprint` can and should be updated over time, for
        instance to

        incorporate new or refined data from [=data owners=] (see
        [[#lifecycle]]).
      summary: |
        The ProductFootprint represents the footprint of a product.
      type: object
      title: ProductFootprint
      required:
        - id
        - specVersion
        - created
        - status
        - companyName
        - companyIds
        - productDescription
        - productIds
        - productNameCompany
        - pcf
      properties:
        id:
          description: >
            A unique identifier that a system uses to refer to the entire
            dataset of the PCF. 

            This is typically an automatically-generated number by the solution
            to maintain 

            the required technical references to data within the system. 
          type: string
          x-go-type-skip-optional-pointer: true
          example: f4b1225a-bd44-4c8e-861d-079e4e1dfd69
        specVersion:
          description: >
            The version of the PACT Technical Specifications that the data being
            shared complies with. 

            This is a string in the format of "major.minor.patch" (e.g.
            "3.0.0").
          type: string
          pattern: ^\d+\.\d+\.\d+(-\d{8})?$
          x-go-type-skip-optional-pointer: true
          example: 3.0.0
        precedingPfIds:
          description: >
            A given PCF may change over time, due to updates to the
            calculation. 

            This is a list of IDs that reflect "past versions" of the current
            PCF,

            maintained by the solution. If defined, MUST be non-empty set of
            IDs.


            See [[#lifecycle]] for details.
          x-rule: SHOULD
          type: array
          items:
            type: string
            x-go-type-skip-optional-pointer: true
          minItems: 1
          uniqueItems: true
          x-go-type-skip-optional-pointer: true
          example:
            - f4b1225a-bd44-4c8e-861d-079e4e1dfd69
            - 079e425a-464f-528d-341d-4a944a1dfd70
        created:
          description: >
            The date and time when the PCF was created. This is typically an
            automatically 

            generated field by the solution. It SHOULD NOT be used to derive
            status of 

            validity of the PCF. 


            See [[#lifecycle]] for details.
          type: string
          format: date-time
          x-go-type-skip-optional-pointer: true
          example: '2024-10-31T00:00:00Z'
        status:
          description: >
            The status of the PCF. `Active` means that the PCF is the most
            recent version 

            and is the one that SHOULD be used by a data recipient, e.g. for
            product 

            footprint calculations. `Deprecated` means that the PCF is no
            longer 

            the most recent version and SHOULD NOT be used by data recipients.


            See [[#lifecycle]] for details.
          type: string
          enum:
            - Active
            - Deprecated
          x-go-type-skip-optional-pointer: true
          example: Active
        validityPeriodStart:
          description: >
            The start date of the validity period: the time interval during
            which the 

            ProductFootprint is declared as valid for use by a receiving [=data
            recipient=].


            If no validity period is specified, the ProductFootprint is valid
            for 3 years after

            the <{CarbonFootprint/referencePeriodEnd}>


            See [[#validity-period]] for details.
          summary: >
            The start date and time of the validity period. The period of time
            between the 

            validityPeriodStart and validityPeriodEnd is defined as the
            "validity period", 

            and represents the time period during which the PCF is valid.
            Specifying the 

            validity period is optional. If this is not specified, then it is
            assumed the 

            PCF is valid for 3 years, starting from the referencePeriodEnd. 
          type: string
          format: date-time
          x-term: Validity Period
          x-methodology: 3.2.3
          x-go-type-skip-optional-pointer: true
        validityPeriodEnd:
          description: >
            The end date and time of the validity period. After this date the
            ProductFootprint

            is not valid for use anymore. See [[#validity-period]] for more
            details.
          type: string
          format: date-time
          x-term: Validity Period
          x-methodology: 3.2.3
          x-go-type-skip-optional-pointer: true
        companyName:
          $ref: '#/components/schemas/NonEmptyString'
        companyIds:
          description: >
            The non-empty set of Uniform Resource Names ([[!RFC8141|URN]]). Each
            value of 

            this set is supposed to uniquely identify the ProductFootprint Data
            Owner. 
          summary: >
            A list of company identifiers which represent the companies that are
            considered 

            data owners of the PCF. In a large organization, this may include
            multiple

            subsidiaries or legal entities of a given corporation, hence the
            need to provide 

            multiple identifiers. A list of only one identifier is also valid.
            The format 

            of each companyID MUST be provided as a Uniform Resource Names
            ([[!RFC8141|URN]]),

            which helps ensure the data provided is standardized and can be
            interpreted by the 

            receiving system.
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Urn'
          x-go-type-skip-optional-pointer: true
          example:
            - urn:company:example:company1
        productDescription:
          description: >
            The free-form description of the product, including any additional
            relevant information 

            such as production technology, packaging, process, feedstock and
            technical parameters 

            (e.g. dimensions). Products which are services (i.e. consulting)
            should include a short

            description of the service.
          type: string
          x-go-type-skip-optional-pointer: true
        productIds:
          description: >
            The non-empty set of Product IDs in [[!RFC8141|URN]] format. Each of
            the values in the set is 

            supposed to uniquely identify the product. See
            [[#product-identifier-urns]] for syntax and

            examples.
          summary: >
            All relevant product identifiers to identify the product for which
            the provided 

            PCF was calculated (e.g. supplier part number, GTIN, article number,
            batch number, etc.)
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Urn'
          x-go-type-skip-optional-pointer: true
        productClassifications:
          description: >
            The non-empty set of Product Classifications in [[!RFC8141|URN]]
            format. Each of the values 

            in the set can classify the product as part of distinct groupings
            and categorizations. 

            See [[#product-classification-urns]].
          note: Replaces productCategoryCpc deprecated in 2.3
          summary: >
            A list of classification or category identifiers in URN format. Use
            well known urn's here, 

            or adhere to recommended urn:pact: format. For example UN CPC, CAS
            Numbr, CN Code etc.


            This replaces the productCategoryCpc property from 2.0.
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Urn'
          x-go-type-skip-optional-pointer: true
          example:
            - urn:pact:productclassification:un-cpc:1234
        productNameCompany:
          $ref: '#/components/schemas/NonEmptyString'
        comment:
          description: >
            Any additional information related to the PCF. Whereas the property
            productDescription 

            contains product-level information, comment should be used for
            information and instructions 

            related to the calculation of the PCF, or other information which
            informs the ability to interpret

            (e.g. LUC not included as unable to calculate LUC), to audit, or to
            verify the PCF.



            Information explaining the current status of the PCF, what was
            changed since the last version, etc. If the PCF was changed since a
            previous version, indicate all methodological and/or production
            process change(s) that occurred to result in the PCF change. For
            example, include the relevant change(s) from the list below:


            1. In case product or sector specific guidance used does not align
            with PACT Methodology's requirement, the areas of disalignment
            should be specified in the comment section (e.g. allocation rules,
            exemption rules, data quality metrics).


            2. Information explaining the current status of the PCF, what was
            changed since the last version, etc. If the PCF was changed since a
            previous version, indicate all methodological and/or production
            process change(s) that occurred to result in the PCF change. E.g.,
            include the relevant change(s) from the list below: 


            Methodological:
             - Access to new Emission Factor data (database, supplier-specific, company-specific)
             - Updated upstream data (i.e. upstream supplier updated their PCF based on methodology change)

            Production Process:
             - Change in process
             - Change in feedstock
             - Change from conventional to certified sustainable material
             - Change in energy source
             - Change in upstream supplier
             - Updated upstream data (i.e. upstream supplier updated their PCF based on process change)

             3. Additional information on biogenic emissions & removals calculation  should be specified. This includes information on tools used for  calculations (e.g. Cool Farm Tool), and methodological choices made in calculation of biogenic emissions and removals (e.g. Statistical  or Direct Land use change calculation for DLUC calculations). 
          type: string
          x-rule: SHOULD
          x-go-type-skip-optional-pointer: true
        pcf:
          $ref: '#/components/schemas/CarbonFootprint'
        extensions:
          type: array
          description: >
            If defined, 1 or more data model extensions associated with the
            ProductFootprint.

            See <{DataModelExtension}> for details.
          items:
            $ref: '#/components/schemas/DataModelExtension'
          x-go-type-skip-optional-pointer: true
    CarbonFootprint:
      description: >
        A CarbonFootprint represents the carbon footprint of a product and
        related data in accordance with the [=PACT Methodology=].


        ### Scope of a CarbonFootprint ### {#dt-carbonfootprint-scope}


        Each CarbonFootprint is scoped by

        1. Time Period: the time period is defined by the properties
        <{CarbonFootprint/referencePeriodStart}> and
        <{CarbonFootprint/referencePeriodEnd}> (see [=PACT Methodology=] section
        3.2.3)

        2. Geography: further set by the properties
        <{CarbonFootprint/geographyRegionOrSubregion}>,
        <{CarbonFootprint/geographyCountry}>, and
        <{CarbonFootprint/geographyCountrySubdivision}> (see [=PACT
        Methodology=] section 3.2.3)


        If a CarbonFootprint

        1. Has geographical granularity `Global`, then the properties
        <{CarbonFootprint/geographyCountry}> and
        <{CarbonFootprint/geographyRegionOrSubregion}> and
        <{CarbonFootprint/geographyCountrySubdivision}> MUST be `undefined`;

        2. Has a regional or sub-regional geographical granularity, then the
        property <{CarbonFootprint/geographyRegionOrSubregion}> MUST be
        `defined` and the properties <{CarbonFootprint/geographyCountry}> and
        <{CarbonFootprint/geographyCountrySubdivision}> MUST be `undefined`;

        3. Has a country-specific geographical granularity, then property
        <{CarbonFootprint/geographyCountry}> MUST be `defined` AND the
        properties <{CarbonFootprint/geographyRegionOrSubregion}> and
        <{CarbonFootprint/geographyCountrySubdivision}> MUST be `undefined`;

        4. Has a country subdivision-specific geographical granularity, then
        property <{CarbonFootprint/geographyCountrySubdivision}> MUST be
        `defined` AND the properties
        <{CarbonFootprint/geographyRegionOrSubregion}> and
        <{CarbonFootprint/geographyCountry}> MUST be `undefined`.
      summary: >
        The CarbonFootprint represents the carbon footprint of a product and
        related data 

        in accordance with the PACT Methodology.
      title: CarbonFootprint
      type: object
      required:
        - declaredUnitOfMeasurement
        - declaredUnitAmount
        - productMassPerDeclaredUnit
        - referencePeriodStart
        - referencePeriodEnd
        - pcfExcludingBiogenicUptake
        - pcfIncludingBiogenicUptake
        - fossilGhgEmissions
        - fossilCarbonContent
        - ipccCharacterizationFactors
        - crossSectoralStandards
        - exemptedEmissionsPercent
      properties:
        declaredUnitOfMeasurement:
          description: >
            The unit of measurement of the product. Together with
            `declaredUnitAmount` 

            this defines the 'declared unit' of the product. Emissions in this
            carbon 

            footprint are expressed in kgCO2e per 'declared unit'. 


            For example: a PCF for a 12.5 liter bottle of Ethanol states 2 kg of
            CO2e in 

            emissions. In this case the declared unit is 12.5 liter Ethanol,
            thus the

            `declaredUnitOfMeasurement` is "liter", and the `declaredUnitAmount`
            is "12.5".

            The `pcfIncludingBiogenicUptake` is "2.0" kgCO2e per "12.5 liter" of
            Ethanol.
          type: string
          enum:
            - liter
            - kilogram
            - cubic meter
            - kilowatt hour
            - megajoule
            - ton kilometer
            - square meter
            - piece
            - hour
            - megabit second
          x-term: Declared Unit
          x-methodology: 3.2.4
          example: liter
          x-go-type-skip-optional-pointer: true
        declaredUnitAmount:
          $ref: '#/components/schemas/PositiveNonZeroDecimal'
        productMassPerDeclaredUnit:
          $ref: '#/components/schemas/Decimal'
        referencePeriodStart:
          description: |
            The start (inclusive) of the time boundary for which the PCF value
            is considered to be representative. Specifically, this start date
            represents the earliest date from which activity data was collected
            to include in the PCF calculation. 
          summary: >
            The start date and time of the earliest activity data used to
            calculate the 

            PCF. This start date can be considered the start of the period over
            which 

            the given PCF is referencing, or reporting on.
          type: string
          format: date-time
          x-term: Reference period
          x-methodology: 3.2.3
          example: '2025-04-30T00:00:00+00:00'
          x-go-type-skip-optional-pointer: true
        referencePeriodEnd:
          description: |
            The end (exclusive) of the time boundary for which the PCF value is
            considered to be representative. Specifically, this end date
            represents the latest date from which activity data was collected
            to include in the PCF calculation.
          summary: >
            The end date and time of the latest activity data used to calculate
            the PCF. 

            This end date can be considered the end of the period over which the
            given 

            PCF is referencing, or reporting on.
          type: string
          format: date-time
          x-term: Reference period
          x-methodology: 3.2.3
          example: '2025-12-30T00:00:00Z'
          x-go-type-skip-optional-pointer: true
        geographyRegionOrSubregion:
          description: >
            If present, the value MUST be one of the [=UN geographic regions=]
            or [=UN geographic subregions=]. See [[#dt-carbonfootprint-scope]]
            for further details. Additionally, see the [=PACT Methodology=]
            Section 3.2.3.
          summary: >
            The geographic representation of the PCF should be reported at
            different 

            levels of granularity, depending on the preference of the data
            owner 

            (e.g., at a plant, region, or country level). This attribute
            specifies 

            the geographic region to which the PCF refers, i.e. "Africa", 

            "Central Asia", etc.
          type: string
          x-rule: SHOULD
          x-term: Region or Sub-Region
          x-methodology: 3.2.3
          enum:
            - Africa
            - Americas
            - Asia
            - Europe
            - Oceania
            - Australia and New Zealand
            - Central Asia
            - Eastern Asia
            - Eastern Europe
            - Latin America and the Caribbean
            - Melanesia
            - Micronesia
            - Northern Africa
            - Northern America
            - Northern Europe
            - Polynesia
            - South-eastern Asia
            - Southern Asia
            - Southern Europe
            - Sub-Saharan Africa
            - Western Asia
            - Western Europe
          x-go-type-skip-optional-pointer: true
          example: Eastern Asia
        geographyCountry:
          description: >
            If present, the value MUST conform to the [ISO 3166-1
            alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) 

            country code.

            See [[#dt-carbonfootprint-scope]] for further details.
          summary: >
            The geographic representation of the PCF should be reported at
            different levels

            of granularity, depending on the preference of the data owner (e.g.,
            at a 

            plant, region, or country level). This field indicates the country
            to which 

            the PCF refers. The country name must be according to ISO 3166-1
            alpha-2 

            country code (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
          type: string
          pattern: ^[A-Z]{2}$
          comment: ISO 3166-1 alpha-2
          x-rule: SHOULD
          x-term: Country
          x-methodology: 3.2.3
          x-go-type-skip-optional-pointer: true
          example: US
        geographyCountrySubdivision:
          description: >
            If present, a [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2)
            country and subdivision code. See [[#dt-carbonfootprint-scope]] for
            further details.
          summary: >
            The geographic representation of the PCF should be reported at
            different 

            levels of granularity, depending on the preference of the data
            owner 

            (e.g., at a plant, region, or country level). This attribute
            represents 

            the most granular (i.e. "most specific") geography, i.e. the
            specific 

            subdivision within a given country, for example New York State
            within 

            the USA. Follows ISO 3166-2
            (https://en.wikipedia.org/wiki/ISO_3166-2)
          type: string
          pattern: ^[A-Z]{2}-[A-Z0-9]{1,3}$
          comment: ISO 3166-2
          x-rule: SHOULD
          x-term: Country subdivision
          x-methodology: 3.2.3
          x-go-type-skip-optional-pointer: true
          example: US-CA
        boundaryProcessesDescription:
          description: >
            Brief description of the processes attributable to each life cycle
            stage included 

            in the PCF (e.g. electricity consumption for manufacturing),
            especially those 

            that significantly contribute manufacturing steps of the product
            (including 

            general description of used technologies).
          note: optional in 3.0, was mandatory in 2.x
          type: string
          x-rule: SHOULD
          x-methodology: 3.2
          x-go-type-skip-optional-pointer: true
        pcfExcludingBiogenicUptake:
          $ref: '#/components/schemas/Decimal'
        pcfIncludingBiogenicUptake:
          $ref: '#/components/schemas/Decimal'
        fossilCarbonContent:
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        biogenicCarbonContent:
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        recycledCarbonContent:
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        fossilGhgEmissions:
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        landUseChangeGhgEmissions:
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        landCarbonLeakage:
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        landManagementFossilGhgEmissions:
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        landManagementBiogenicCO2Emissions:
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        landManagementBiogenicCO2Removals:
          $ref: '#/components/schemas/NegativeOrZeroDecimal'
        biogenicCO2Uptake:
          $ref: '#/components/schemas/NegativeOrZeroDecimal'
        biogenicNonCO2Emissions:
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        landAreaOccupation:
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        aircraftGhgEmissions:
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        packagingEmissionsIncluded:
          description: >
            Indicates whether packaging emissions are included in the scope 

            and boundary of the product carbon footprint. 


            If `true`, packaging emissions are included in the product carbon 

            footprint, and the `packagingGhgEmissions` property SHOULD be
            defined.


            If `false`, packaging emissions are not included in the product
            carbon 

            footprint, and the `packagingGhgEmissions` property MUST be
            undefined.
          type: boolean
          x-rule: SHALL
          x-term: Packaging emissions
          x-methodology: 3.3.1.1
        packagingGhgEmissions:
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        packagingBiogenicCarbonContent:
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        outboundLogisticsGhgEmissions:
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        ccsTechnologicalCO2CaptureIncluded:
          description: >
            Indicates whether CCS (including BECCS) take place within the scope
            and boundary of the product carbon footprint. 


            If `true`, `ccsTechnologicalCO2Capture`, `technologicalCO2Removals`
            and `technologicalCO2CaptureOrigin` shall be defined if known and
            available.


            If `false`, `ccsTechnologicalCO2Capture`, `technologicalCO2Removals`
            and `technologicalCO2CaptureOrigin` shall be undefined.
          type: boolean
          x-term: Technological CO2 capture with geological storage
          x-rule: SHALL
          x-methodology: 3.3.2.5
          example: false
        ccsTechnologicalCO2Capture:
          $ref: '#/components/schemas/NegativeOrZeroDecimal'
        technologicalCO2CaptureOrigin:
          description: >
            For CCU: Information about the origin (fossil or biogenic) and path
            of the captured CO2 used in CCU, including 

            the name and location of the capture facility. This information
            enhances transparency and traceability, 

            enabling tracking of CO2 across the value chain.


            For CCS: Traceability data, i.e. information on location injection
            site, geological reservoir as part of the overall 

            technological CO2 capture origin data point for the PCF.
          type: string
          x-term: Technological CO2 capture origin
          x-rule: CCU,CCS
          x-methodology: 3.3.2.5
          x-go-type-skip-optional-pointer: true
        technologicalCO2Removals:
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        ccuCarbonContent:
          $ref: '#/components/schemas/PositiveOrZeroDecimal'
        ccuCalculationApproach:
          description: |
            The calculation approach for CCU: "Cut-off" or "Credit."
          type: string
          enum:
            - Cut-off
            - Credit
          x-term: CCU calculation approach
          x-methodology: 3.3.2.5
          x-rule: CCU
          x-go-type-skip-optional-pointer: true
        ccuCreditCertification:
          $ref: '#/components/schemas/Uri'
        ipccCharacterizationFactors:
          description: >
            The characterization factors from one or more IPCC Assessment
            Reports used in the calculation of the PCF.

            It MUST be a non-empty set of strings with the format `AR$VERSION$`,
            where `$VERSION$` stands for the

            IPCC report version number and MUST be an integer.


            Per the Methodology the latest available characterization factor
            version shall be used, i.e., `["AR6"]`. In the event this is not
            possible, include the set of all characterization factors used.
          note: supersedes `characterizationFactors` deprecated in 2.3.
          summary: >
            The IPCC (Intergovernmental Panel of Climate Change) frequently
            releases (GWP) 

            global warming potential values for climate gases related to CO2.
            These GWP 

            values are released in Assessment Reports (AR), which are numbered. 


            The AR number can be used to track the age and accuracy of the GWP
            values used

            in reporting. This field indicates the IPCC version of the GWP
            characterization 

            factors used in the calculation of the PCF.


            Per the PACT Methodology, the latest available characterization
            factor version 

            shall be used, i.e., [""AR6""]. In the event this is not possible,
            include the 

            set of all characterization factors used.
          type: array
          items:
            type: string
            pattern: ^AR\d+$
            x-go-type-skip-optional-pointer: true
          minItems: 1
          uniqueItems: true
          x-term: Characterization factors
          x-methodology: 3.2.2
          x-go-type-skip-optional-pointer: true
          example:
            - AR6
        crossSectoralStandards:
          description: >
            The cross-sectoral standards applied for calculating or allocating
            [=GHG=] emissions.


            It MUST be a non-empty array and SHOULD contain only the following
            values without duplicates:

              : `ISO14067`
              :: for the ISO 14067 Standard, "Greenhouse gases — Carbon footprint of products — Requirements and guidelines for quantification"
              : `ISO14083`
              :: for the ISO 14083 Standard, "Greenhouse gases — Quantification and reporting of greenhouse gas emissions arising from transport chain operations"
              : `ISO14040-44`
              :: for the ISO 14040-44 Standard, "Environmental management — Life cycle assessment — Principles and framework"
              : `GHGP-Product`
              :: for the Greehouse Gas Protocol (GHGP) Product Standard
              : `PEF`
              :: for the EU Product Environmental Footprint Guide
              : `PACT-1.0`
              : `PACT-2.0`
              : `PACT-3.0`
              :: for a given version of the [=PACT Methodology=]. It is recommended to use the latest version of the Methodology.
              : `PAS2050`
              :: for the Publicly Available Specification (PAS) 2050, "Specification for the assessment of the life cycle greenhouse gas emissions of goods and services". The use of this standard is permitted but not recommended.

            The enumeration of standards above CAN evolve in future revisions. A
            host system MUST accept ProductFootprints from later revisions with
            `crossSectoralStandards` containing values that are not defined in
            this specification.
          note: Supersedes `crossSectoralStandardsUsed` deprecated in version 2.3.
          summary: >
            The cross-sectoral standards applied for calculating or allocating
            GHG 

            emissions. If multiple apply, list all.
          type: array
          items:
            type: string
            x-enum:
              - ISO14067
              - ISO14083
              - ISO14040-44
              - GHGP-Product
              - PEF
              - PACT-1.0
              - PACT-2.0
              - PACT-3.0
              - PAS2050
              - ...
            x-go-type-skip-optional-pointer: true
          minItems: 1
          uniqueItems: true
          x-term: Cross-sectoral standards
          x-methodology: 3.1.2
          x-go-type-skip-optional-pointer: true
          example:
            - ISO14067
            - PACT-3.0
        productOrSectorSpecificRules:
          description: >
            The product-specific or sector-specific rules applied for
            calculating or allocating GHG emissions. If no product or sector
            specific rules were followed, this set MUST be empty.
          summary: >
            The product-specific or sector-specific rules applied for
            calculating or 

            allocating GHG emissions. Sector specific guidance frameworks, such
            as 

            Product Category Rules (PCR), are sets of rules for how to calculate
            and 

            document Life Cycle Assessments. They provide product category
            specific

            guidance and enhance comparability between assessments of the
            different 

            suppliers for the same category (sector). The same applies to
            Product 

            Environmental Footprint Category Rules (PEFCR)).  If no rules were
            used, 

            leave this field empty.
          type: array
          items:
            $ref: '#/components/schemas/ProductOrSectorSpecificRule'
          minItems: 1
          uniqueItems: true
          x-term: Product or sector specific rules
          x-methodology: 3.1.2
          note: >-
            Multiple ProductOrSpecificRules can be specifed, each with its own
            operator and ruleNames.
          x-go-type-skip-optional-pointer: true
          example:
            - operator: PEF
              ruleNames:
                - PEF 1.0
                - PEF 2.0
            - operator: PCR
              ruleNames:
                - PCR-A
        exemptedEmissionsPercent:
          $ref: '#/components/schemas/Decimal'
        exemptedEmissionsDescription:
          description: >
            Rationale behind exclusion of specific PCF emissions, CAN be the
            empty string if no emissions were excluded.
          summary: >
            If emissions exempted, rationale behind exclusion of specific PCF
            emissions.
          x-term: Exemption rules
          x-methodology: 3.3.1.2
          note: optional in 3.0, was mandatory in 2.x
          type: string
          x-go-type-skip-optional-pointer: true
        allocationRulesDescription:
          description: >
            Description of the allocation rules applied to the PCFs foreground
            data 

            including an explanation of the underlying reasons (way of
            allocating 

            all activities from manufacturing steps to the declared unit).
          type: string
          x-rule: SHOULD
          x-term: Allocation rules
          x-methodology: 3.3.1.3
          x-go-type-skip-optional-pointer: true
        secondaryEmissionFactorSources:
          description: >
            If secondary data was used to calculate the <{CarbonFootprint}>,
            then it MUST include the property
            <{CarbonFootprint/secondaryEmissionFactorSources}> with value the
            emission factors used for the <{CarbonFootprint}> calculation.


            If no secondary data is used, this property MUST BE undefined.
          summary: >
            The list of secondary data sources and versions which have been used
            by 

            the data owner for the PCF calculation (e.g. databases such as
            ecoinvent)


            If no secondary data is used, this property MUST BE undefined.
          x-term: Secondary emission factors sources
          x-methodology: 3.2.3
          x-rule: SHOULD
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/EmissionFactorSource'
          x-go-type-skip-optional-pointer: true
          example:
            - name: ecoinvent
              version: '3.7'
        primaryDataShare:
          $ref: '#/components/schemas/Decimal'
        dqi:
          $ref: '#/components/schemas/DataQualityIndicators'
        verification:
          $ref: '#/components/schemas/Verification'
    DataModelExtension:
      title: DataModelExtension
      description: >
        Each data model extension MUST be a valid JSON object conforming with
        the

        [JSON Representation of a Data Model
        Extension](https://wbcsd.github.io/data-model-extensions/spec/#instantiation).


        See [[!DATA-MODEL-EXTENSIONS]] for technical details and
        [[!EXTENSIONS-GUIDANCE]] for data model extension guidance.
      example: >
        Example imaginary Data Model Extension for encoding shipment-related
        data, encoded in JSON:

        ```json

        {
          "specVersion": "2.0.0",
          "dataSchema": "https://reg.carbon-transparency.org/shipment/1.0.0/data-model.json",
          "data": {
            "shipmentId": "S1234567890",
            "consignmentId": "Cabc.def-ghi",
            "shipmentType": "PICKUP",
            "weight": 10,
            "transportChainElementId": "ABCDEFGHI"
          }
        }

        ```
      type: object
      required:
        - specVersion
        - dataSchema
        - data
      properties:
        specversion:
          type: string
          description: |
            The version of the Data Model Extension specification. The value 
            MUST be a string in the format major.minor.patch as defined in 
            Semantic Versioning 2.0.0.
          x-go-type-skip-optional-pointer: true
        dataSchema:
          type: string
          format: uri
          description: >
            The value MUST be the URL to the publicly accessible Extension
            Schema File
          x-go-type-skip-optional-pointer: true
        documentation:
          type: string
          format: uri
          description: >
            The value MUST be the URL to the publicly accessible Extension
            Documentation.
          x-go-type-skip-optional-pointer: true
        data:
          type: object
          description: >
            The value MUST be a JSON Object that conforms to the extension
            schema file 

            referenced by the dataSchema property.
    ProductOrSectorSpecificRule:
      title: ProductOrSectorSpecificRule
      description: >
        A ProductOrSectorSpecificRule refers to a set of product or sector
        specific rules published by a specific operator and applied during
        product carbon footprint calculation.
      type: object
      required:
        - operator
        - ruleNames
      properties:
        operator:
          description: >
            Selection of operator of PCR being used for the PCF calculation. If 

            operator is not available in the given list, or if a sector
            specific 

            guidance has been followed, please set "Other" and include details 

            under "otherOperatorName".
          type: string
          enum:
            - PEF
            - EPD International
            - Other
          x-go-type-skip-optional-pointer: true
          example: PEF
        ruleNames:
          description: >
            Names of the product or sector specific rules being used for the
            PCF 

            calculation.
          type: array
          items:
            type: string
            minLength: 1
            x-go-type-skip-optional-pointer: true
          minItems: 1
          uniqueItems: true
          x-go-type-skip-optional-pointer: true
          example:
            - PEF 1.0
            - PEF 2.0
        otherOperatorName:
          description: >
            If operator is Other, then this attribute must be populated with the
            name 

            of the operator.
          type: string
          minLength: 1
          x-go-type-skip-optional-pointer: true
      example: |
        ```json
        {
          "operator": "PEF",
          "ruleNames": [
            "PEF 1.0",
            "Other"
          ]
        }
        ```
    EmissionFactorSource:
      title: EmissionFactorSource
      description: >
        References emission factor databases, see [=PACT Methodology=] Section
        4.1.3.2.


        ```json

        {
          "name": "ecoinvent",
          "version": "3.9.1"
        }

        ```      
      type: object
      required:
        - name
        - version
      properties:
        name:
          $ref: '#/components/schemas/NonEmptyString'
        version:
          $ref: '#/components/schemas/NonEmptyString'
    DataQualityIndicators:
      title: DataQualityIndicators
      description: >
        Data type DataQualityIndicators contains the quantitative data quality
        indicators.  
      example: >
        Example value for the case that all DQIs are known but no coverage after
        exemption assessment performed:


        ```json

        {
          "technologicalDQR": "5.0",
          "geographicalDQR": "2.0"
          "temporalDQR": "3.0",
        }

        ```        
      type: object
      x-methodology: 4.2.3
      required:
        - technologicalDQR
        - geographicalDQR
        - temporalDQR
      properties:
        technologicalDQR:
          $ref: '#/components/schemas/Decimal'
        geographicalDQR:
          $ref: '#/components/schemas/Decimal'
        temporalDQR:
          $ref: '#/components/schemas/Decimal'
    Verification:
      title: Verification
      description: |
        Contains the verification in conformance with the PACT Methodology.
      note: Renamed from `Assurance` in 3.0
      example: |
        ```json 
        {
          "coverage": "PCF program",
          "providerName": "My Auditor",
          "completedAt": "2025-04-08T14:47:32Z"
          "standardName": "ISO 14044"
        }
        ```
      type: object
      properties:
        coverage:
          description: >
            The coverage of the verification defines the type and level of GHG
            data to be verified.
          type: string
          note: values changed from v2.x
          enum:
            - PCF calculation model
            - PCF program
            - product level
          x-term: Coverage
          x-methodology: 5.3.3
          x-go-type-skip-optional-pointer: true
        providerName:
          description: >
            The non-empty name of the independent third party engaged to
            undertake the verification.
          note: optional in version 3.0 was mandatory in 2.x
          type: string
          x-term: Verification provider
          x-methodology: 5.3.7
          x-go-type-skip-optional-pointer: true
        completedAt:
          description: |
            The date at which the verification was completed
          type: string
          format: date-time
          x-go-type-skip-optional-pointer: true
        standardName:
          description: |
            Name of the standard against which the PCF was assured
          type: string
          x-go-type-skip-optional-pointer: true
        comments:
          description: >
            Any additional comments that will clarify the interpretation of the
            verification.
          type: string
          x-go-type-skip-optional-pointer: true
    NonEmptyString:
      type: string
      minLength: 1
      x-go-type-skip-optional-pointer: true
    Urn:
      type: string
      format: urn
      pattern: '^([uU][rR][nN]):'
      x-go-type-skip-optional-pointer: true
    Uri:
      type: string
      format: uri
      x-go-type-skip-optional-pointer: true
    Decimal:
      type: string
      format: decimal
      pattern: ^[+-]?\d+(\.\d+)?$
      x-go-type-skip-optional-pointer: true
    PositiveNonZeroDecimal:
      type: string
      format: decimal
      pattern: ^[+]?(\d*[1-9]\d*)(\.\d+)?|(0+\.\d*[1-9]\d*)$
      comment: '> 0'
      x-go-type-skip-optional-pointer: true
    PositiveOrZeroDecimal:
      type: string
      format: decimal
      pattern: ^[+]?\d+(\.\d+)?$
      comment: '>= 0'
      x-go-type-skip-optional-pointer: true
    NegativeOrZeroDecimal:
      type: string
      format: decimal
      pattern: ^(-\d+(\.\d+)?)|0+(\.0+)?$
      comment: <= 0
      x-go-type-skip-optional-pointer: true
    NegativeNonZeroDecimal:
      type: string
      format: decimal
      pattern: ^-((\d*[1-9]\d*)(\.\d+)?|(0+\.\d*[1-9]\d*))$
      comment: < 0
      x-go-type-skip-optional-pointer: true
    BaseEvent:
      description: |
        Base class for all events, it follows the CloudEvents specification.
      type: object
      required:
        - type
        - specversion
        - id
        - source
        - time
        - data
      properties:
        type:
          type: string
          description: Event type identifier.
          x-go-type-skip-optional-pointer: true
        specversion:
          type: string
          description: CloudEvents version.
          x-go-type-skip-optional-pointer: true
        id:
          type: string
          description: >-
            Event identifier. Must be able to uniquely identify the event by
            source and id.
          x-go-type-skip-optional-pointer: true
        source:
          type: string
          description: >-
            The domain and endpoint of the application from which the event
            originates.
          x-go-type-skip-optional-pointer: true
        time:
          type: string
          format: date-time
          description: The time the event occurred.
          x-go-type-skip-optional-pointer: true
        data:
          type: object
          description: The event payload.
    PublishedEvent:
      $ref: '#/components/schemas/BaseEvent'
    RequestCreatedEvent:
      $ref: '#/components/schemas/BaseEvent'
    RequestFulfilledEvent:
      $ref: '#/components/schemas/BaseEvent'
    RequestRejectedEvent:
      $ref: '#/components/schemas/BaseEvent'
    Error:
      title: Error
      description: >-
        Object with error code and description, to be returned by the API
        methods in case of error.

        See [[#api-error-handling]] for details.
      type: object
      properties:
        code:
          type: string
          description: Error code identifier.
          enum:
            - BadRequest
            - AccessDenied
            - TokenExpired
            - NotFound
            - InternalError
            - NotImplemented
          x-go-type-skip-optional-pointer: true
        message:
          type: string
          description: Human readable error message.
          x-go-type-skip-optional-pointer: true
      required:
        - code
        - message
      example: |
        ```json
        { 
          "code": "NotFound",
          "message": "The requested footprint could not be found." 
        }
        ```
    BadRequestResponse:
      description: |
        Bad request.

        Response body MUST contain a JSON <{Error}> object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFoundResponse:
      description: |
        Not found.

        Response body MUST contain a JSON <{Error}> object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnauthorizedResponse:
      description: >
        The request is not authorized, the access token is invalid or has
        expired. 


        Response body MUST contain a JSON <{Error}> object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TokenExpiredResponse:
      description: |
        Token expired.

        Response body MUST contain a JSON <{Error}> object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ForbiddenResponse:
      description: |
        Access Denied.

        Response body MUST contain a JSON <{Error}> object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotImplementedResponse:
      description: |
        Not implemented.

        Response body MUST contain a JSON <{Error}> object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalErrorResponse:
      description: |
        Internal Error.

        Response body MUST contain a JSON <{Error}> object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    RequestCreatedEventData:
      type: object
      description: |
        Criteria for filtering ProductFootprint requests.
      properties:
        productId:
          description: >-
            One or more product IDs. Will return all footprints which have a
            corresponding ID in their `productIds` attribute. The match must
            be-case insensitive. Note that a footprint itself can also have
            multiple product IDs.
          type: array
          items:
            type: string
            format: urn
            pattern: '^([uU][rR][nN]):'
            x-go-type-skip-optional-pointer: true
          x-go-type-skip-optional-pointer: true
        companyId:
          description: >-
            One or more company IDs. Will return all footprints which have a
            corresponding ID in their `companyId` attribute. The match must be
            case-insensitive. Note that a footprint itself can also have
            multiple company IDs.
          type: array
          items:
            type: string
            format: urn
            pattern: '^([uU][rR][nN]):'
            x-go-type-skip-optional-pointer: true
          x-go-type-skip-optional-pointer: true
        geography:
          description: >-
            One or more geographic specifiers. Values specified can denote
            `geographyRegion` or `geographyCountry` or
            `geographyCountrySubdivision`. Will return all footprints within the
            specified geography(s). The match must be-case insensitive.
          type: array
          items:
            type: string
            x-go-type-skip-optional-pointer: true
          x-go-type-skip-optional-pointer: true
        classification:
          description: >-
            One or more product classifications. Will return all footprints with
            corresponding values in the `productClassifications` attribute. Note
            that a footprint itself can have multiple classifications. The match
            must be-case insensitive.
          type: array
          items:
            type: string
            format: urn
            pattern: '^([uU][rR][nN]):'
            x-go-type-skip-optional-pointer: true
          x-go-type-skip-optional-pointer: true
        validOn:
          description: >
            If present, MUST match all PCFs which were valid on the date
            specified: start validity period <= validOn <= end validity period.
            See [[#validity-period]] for determining validity period.
          type: string
          format: date-time
          x-go-type-skip-optional-pointer: true
        validAfter:
          description: >
            If present, MUST match PCFs with a validity period start >
            validAfter.

            See [[#validity-period]] for determining validity period.
          type: string
          format: date-time
          x-go-type-skip-optional-pointer: true
        validBefore:
          description: |
            If present, MUST match PCFs with a validity period end < validBefore
            See [[#validity-period]] for determining validity period.
          type: string
          format: date-time
          x-go-type-skip-optional-pointer: true
        status:
          description: >
            If present, MUST be "Active" or "Deprecated". If not specified, will
            return footprints regardless of status. The match must be-case
            insensitive.
          type: string
          enum:
            - Active
            - Deprecated
          x-go-type-skip-optional-pointer: true
        comment:
          description: |
            Free text comment.
          type: string
          x-go-type-skip-optional-pointer: true
  parameters:
    productId:
      name: productId
      description: >-
        One or more product IDs. Will return all footprints which have a
        corresponding ID in their `productIds` attribute. The match must be-case
        insensitive. Note that a footprint itself can also have multiple product
        IDs.
      in: query
      explode: true
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Urn'
        x-go-type-skip-optional-pointer: true
    companyId:
      name: companyId
      description: >-
        One or more company IDs. Will return all footprints which have a
        corresponding ID in their `companyId` attribute. The match must be
        case-insensitive. Note that a footprint itself can also have multiple
        company IDs.
      in: query
      explode: true
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Urn'
        x-go-type-skip-optional-pointer: true
    geography:
      name: geography
      description: >-
        One or more geographic specifiers. Values specified can denote
        `geographyRegion` or `geographyCountry` or
        `geographyCountrySubdivision`. Will return all footprints within the
        specified geography(s). The match must be-case insensitive.
      in: query
      explode: true
      schema:
        type: array
        items:
          type: string
          x-go-type-skip-optional-pointer: true
        x-go-type-skip-optional-pointer: true
    classification:
      name: classification
      description: >-
        One or more product classifications. Will return all footprints with
        corresponding values in the `productClassifications` attribute. Note
        that a footprint itself can have multiple classifications. The match
        must be-case insensitive.
      in: query
      explode: true
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Urn'
        x-go-type-skip-optional-pointer: true
    validOn:
      name: validOn
      description: >
        If present, MUST match all PCFs which were valid on the date specified:
        start validity period <= validOn <= end validity period. See
        [[#validity-period]] for determining validity period.
      in: query
      schema:
        type: string
        format: date-time
        x-go-type-skip-optional-pointer: true
    validAfter:
      name: validAfter
      description: |
        If present, MUST match PCFs with a validity period start > validAfter. 
        See [[#validity-period]] for determining validity period. 
      in: query
      schema:
        type: string
        format: date-time
        x-go-type-skip-optional-pointer: true
    validBefore:
      name: validBefore
      description: |
        If present, MUST match PCFs with a validity period end < validBefore
        See [[#validity-period]] for determining validity period. 
      in: query
      schema:
        type: string
        format: date-time
        x-go-type-skip-optional-pointer: true
    status:
      name: status
      description: >
        If present, MUST be "Active" or "Deprecated". If not specified, will
        return footprints regardless of status. The match must be-case
        insensitive. 
      in: query
      schema:
        type: string
        enum:
          - Active
          - Deprecated
        x-go-type-skip-optional-pointer: true
