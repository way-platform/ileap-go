// Package pactv3 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.2-0.20250511160408-c8cf342fd5ea DO NOT EDIT.
package pactv3

import (
	"time"
)

// Defines values for CarbonFootprintCcuCalculationApproach.
const (
	CarbonFootprintCcuCalculationApproachCredit CarbonFootprintCcuCalculationApproach = "Credit"
	CarbonFootprintCcuCalculationApproachCutOff CarbonFootprintCcuCalculationApproach = "Cut-off"
)

// Defines values for CarbonFootprintDeclaredUnitOfMeasurement.
const (
	CarbonFootprintDeclaredUnitOfMeasurementCubicMeter    CarbonFootprintDeclaredUnitOfMeasurement = "cubic meter"
	CarbonFootprintDeclaredUnitOfMeasurementHour          CarbonFootprintDeclaredUnitOfMeasurement = "hour"
	CarbonFootprintDeclaredUnitOfMeasurementKilogram      CarbonFootprintDeclaredUnitOfMeasurement = "kilogram"
	CarbonFootprintDeclaredUnitOfMeasurementKilowattHour  CarbonFootprintDeclaredUnitOfMeasurement = "kilowatt hour"
	CarbonFootprintDeclaredUnitOfMeasurementLiter         CarbonFootprintDeclaredUnitOfMeasurement = "liter"
	CarbonFootprintDeclaredUnitOfMeasurementMegabitSecond CarbonFootprintDeclaredUnitOfMeasurement = "megabit second"
	CarbonFootprintDeclaredUnitOfMeasurementMegajoule     CarbonFootprintDeclaredUnitOfMeasurement = "megajoule"
	CarbonFootprintDeclaredUnitOfMeasurementPiece         CarbonFootprintDeclaredUnitOfMeasurement = "piece"
	CarbonFootprintDeclaredUnitOfMeasurementSquareMeter   CarbonFootprintDeclaredUnitOfMeasurement = "square meter"
	CarbonFootprintDeclaredUnitOfMeasurementTonKilometer  CarbonFootprintDeclaredUnitOfMeasurement = "ton kilometer"
)

// Defines values for CarbonFootprintGeographyRegionOrSubregion.
const (
	CarbonFootprintGeographyRegionOrSubregionAfrica                      CarbonFootprintGeographyRegionOrSubregion = "Africa"
	CarbonFootprintGeographyRegionOrSubregionAmericas                    CarbonFootprintGeographyRegionOrSubregion = "Americas"
	CarbonFootprintGeographyRegionOrSubregionAsia                        CarbonFootprintGeographyRegionOrSubregion = "Asia"
	CarbonFootprintGeographyRegionOrSubregionAustraliaAndNewZealand      CarbonFootprintGeographyRegionOrSubregion = "Australia and New Zealand"
	CarbonFootprintGeographyRegionOrSubregionCentralAsia                 CarbonFootprintGeographyRegionOrSubregion = "Central Asia"
	CarbonFootprintGeographyRegionOrSubregionEasternAsia                 CarbonFootprintGeographyRegionOrSubregion = "Eastern Asia"
	CarbonFootprintGeographyRegionOrSubregionEasternEurope               CarbonFootprintGeographyRegionOrSubregion = "Eastern Europe"
	CarbonFootprintGeographyRegionOrSubregionEurope                      CarbonFootprintGeographyRegionOrSubregion = "Europe"
	CarbonFootprintGeographyRegionOrSubregionLatinAmericaAndTheCaribbean CarbonFootprintGeographyRegionOrSubregion = "Latin America and the Caribbean"
	CarbonFootprintGeographyRegionOrSubregionMelanesia                   CarbonFootprintGeographyRegionOrSubregion = "Melanesia"
	CarbonFootprintGeographyRegionOrSubregionMicronesia                  CarbonFootprintGeographyRegionOrSubregion = "Micronesia"
	CarbonFootprintGeographyRegionOrSubregionNorthernAfrica              CarbonFootprintGeographyRegionOrSubregion = "Northern Africa"
	CarbonFootprintGeographyRegionOrSubregionNorthernAmerica             CarbonFootprintGeographyRegionOrSubregion = "Northern America"
	CarbonFootprintGeographyRegionOrSubregionNorthernEurope              CarbonFootprintGeographyRegionOrSubregion = "Northern Europe"
	CarbonFootprintGeographyRegionOrSubregionOceania                     CarbonFootprintGeographyRegionOrSubregion = "Oceania"
	CarbonFootprintGeographyRegionOrSubregionPolynesia                   CarbonFootprintGeographyRegionOrSubregion = "Polynesia"
	CarbonFootprintGeographyRegionOrSubregionSouthEasternAsia            CarbonFootprintGeographyRegionOrSubregion = "South-eastern Asia"
	CarbonFootprintGeographyRegionOrSubregionSouthernAsia                CarbonFootprintGeographyRegionOrSubregion = "Southern Asia"
	CarbonFootprintGeographyRegionOrSubregionSouthernEurope              CarbonFootprintGeographyRegionOrSubregion = "Southern Europe"
	CarbonFootprintGeographyRegionOrSubregionSubSaharanAfrica            CarbonFootprintGeographyRegionOrSubregion = "Sub-Saharan Africa"
	CarbonFootprintGeographyRegionOrSubregionWesternAsia                 CarbonFootprintGeographyRegionOrSubregion = "Western Asia"
	CarbonFootprintGeographyRegionOrSubregionWesternEurope               CarbonFootprintGeographyRegionOrSubregion = "Western Europe"
)

// Defines values for ErrorCode.
const (
	ErrorCodeAccessDenied   ErrorCode = "AccessDenied"
	ErrorCodeBadRequest     ErrorCode = "BadRequest"
	ErrorCodeInternalError  ErrorCode = "InternalError"
	ErrorCodeNotFound       ErrorCode = "NotFound"
	ErrorCodeNotImplemented ErrorCode = "NotImplemented"
	ErrorCodeTokenExpired   ErrorCode = "TokenExpired"
)

// Defines values for ProductFootprintStatus.
const (
	ProductFootprintStatusActive     ProductFootprintStatus = "Active"
	ProductFootprintStatusDeprecated ProductFootprintStatus = "Deprecated"
)

// Defines values for ProductOrSectorSpecificRuleOperator.
const (
	ProductOrSectorSpecificRuleOperatorEPDInternational ProductOrSectorSpecificRuleOperator = "EPD International"
	ProductOrSectorSpecificRuleOperatorOther            ProductOrSectorSpecificRuleOperator = "Other"
	ProductOrSectorSpecificRuleOperatorPEF              ProductOrSectorSpecificRuleOperator = "PEF"
)

// Defines values for RequestCreatedEventDataStatus.
const (
	RequestCreatedEventDataStatusActive     RequestCreatedEventDataStatus = "Active"
	RequestCreatedEventDataStatusDeprecated RequestCreatedEventDataStatus = "Deprecated"
)

// Defines values for VerificationCoverage.
const (
	VerificationCoveragePCFCalculationModel VerificationCoverage = "PCF calculation model"
	VerificationCoveragePCFProgram          VerificationCoverage = "PCF program"
	VerificationCoverageProductLevel        VerificationCoverage = "product level"
)

// Defines values for Status.
const (
	StatusActive     Status = "Active"
	StatusDeprecated Status = "Deprecated"
)

// BadRequestResponse Bad request.
//
// Response body MUST contain a JSON <{Error}> object
type BadRequestResponse = interface{}

// BaseEvent Base class for all events, it follows the CloudEvents specification.
type BaseEvent struct {
	// Data The event payload.
	Data map[string]interface{} `json:"data"`

	// ID Event identifier. Must be able to uniquely identify the event by source and id.
	ID string `json:"id"`

	// Source The domain and endpoint of the application from which the event originates.
	Source string `json:"source"`

	// Specversion CloudEvents version.
	Specversion string `json:"specversion"`

	// Time The time the event occurred.
	Time time.Time `json:"time"`

	// Type Event type identifier.
	Type string `json:"type"`
}

// CarbonFootprint A CarbonFootprint represents the carbon footprint of a product and related data in accordance with the [=PACT Methodology=].
//
// ### Scope of a CarbonFootprint ### {#dt-carbonfootprint-scope}
//
// Each CarbonFootprint is scoped by
// 1. Time Period: the time period is defined by the properties <{CarbonFootprint/referencePeriodStart}> and <{CarbonFootprint/referencePeriodEnd}> (see [=PACT Methodology=] section 3.2.3)
// 2. Geography: further set by the properties <{CarbonFootprint/geographyRegionOrSubregion}>, <{CarbonFootprint/geographyCountry}>, and <{CarbonFootprint/geographyCountrySubdivision}> (see [=PACT Methodology=] section 3.2.3)
//
// If a CarbonFootprint
// 1. Has geographical granularity `Global`, then the properties <{CarbonFootprint/geographyCountry}> and <{CarbonFootprint/geographyRegionOrSubregion}> and <{CarbonFootprint/geographyCountrySubdivision}> MUST be `undefined`;
// 2. Has a regional or sub-regional geographical granularity, then the property <{CarbonFootprint/geographyRegionOrSubregion}> MUST be `defined` and the properties <{CarbonFootprint/geographyCountry}> and <{CarbonFootprint/geographyCountrySubdivision}> MUST be `undefined`;
// 3. Has a country-specific geographical granularity, then property <{CarbonFootprint/geographyCountry}> MUST be `defined` AND the properties <{CarbonFootprint/geographyRegionOrSubregion}> and <{CarbonFootprint/geographyCountrySubdivision}> MUST be `undefined`;
// 4. Has a country subdivision-specific geographical granularity, then property <{CarbonFootprint/geographyCountrySubdivision}> MUST be `defined` AND the properties <{CarbonFootprint/geographyRegionOrSubregion}> and <{CarbonFootprint/geographyCountry}> MUST be `undefined`.
type CarbonFootprint struct {
	AircraftGhgEmissions PositiveOrZeroDecimal `json:"aircraftGhgEmissions,omitempty"`

	// AllocationRulesDescription Description of the allocation rules applied to the PCFs foreground data
	// including an explanation of the underlying reasons (way of allocating
	// all activities from manufacturing steps to the declared unit).
	AllocationRulesDescription string                `json:"allocationRulesDescription,omitempty"`
	BiogenicCO2Uptake          NegativeOrZeroDecimal `json:"biogenicCO2Uptake,omitempty"`
	BiogenicCarbonContent      PositiveOrZeroDecimal `json:"biogenicCarbonContent,omitempty"`
	BiogenicNonCO2Emissions    PositiveOrZeroDecimal `json:"biogenicNonCO2Emissions,omitempty"`

	// BoundaryProcessesDescription Brief description of the processes attributable to each life cycle stage included
	// in the PCF (e.g. electricity consumption for manufacturing), especially those
	// that significantly contribute manufacturing steps of the product (including
	// general description of used technologies).
	BoundaryProcessesDescription string                `json:"boundaryProcessesDescription,omitempty"`
	CcsTechnologicalCO2Capture   NegativeOrZeroDecimal `json:"ccsTechnologicalCO2Capture,omitempty"`

	// CcsTechnologicalCO2CaptureIncluded Indicates whether CCS (including BECCS) take place within the scope and boundary of the product carbon footprint.
	//
	// If `true`, `ccsTechnologicalCO2Capture`, `technologicalCO2Removals` and `technologicalCO2CaptureOrigin` shall be defined if known and available.
	//
	// If `false`, `ccsTechnologicalCO2Capture`, `technologicalCO2Removals` and `technologicalCO2CaptureOrigin` shall be undefined.
	CcsTechnologicalCO2CaptureIncluded *bool `json:"ccsTechnologicalCO2CaptureIncluded,omitempty"`

	// CcuCalculationApproach The calculation approach for CCU: "Cut-off" or "Credit."
	CcuCalculationApproach CarbonFootprintCcuCalculationApproach `json:"ccuCalculationApproach,omitempty"`
	CcuCarbonContent       PositiveOrZeroDecimal                 `json:"ccuCarbonContent,omitempty"`
	CcuCreditCertification URI                                   `json:"ccuCreditCertification,omitempty"`

	// CrossSectoralStandards The cross-sectoral standards applied for calculating or allocating [=GHG=] emissions.
	//
	// It MUST be a non-empty array and SHOULD contain only the following values without duplicates:
	//
	//   : `ISO14067`
	//   :: for the ISO 14067 Standard, "Greenhouse gases — Carbon footprint of products — Requirements and guidelines for quantification"
	//   : `ISO14083`
	//   :: for the ISO 14083 Standard, "Greenhouse gases — Quantification and reporting of greenhouse gas emissions arising from transport chain operations"
	//   : `ISO14040-44`
	//   :: for the ISO 14040-44 Standard, "Environmental management — Life cycle assessment — Principles and framework"
	//   : `GHGP-Product`
	//   :: for the Greehouse Gas Protocol (GHGP) Product Standard
	//   : `PEF`
	//   :: for the EU Product Environmental Footprint Guide
	//   : `PACT-1.0`
	//   : `PACT-2.0`
	//   : `PACT-3.0`
	//   :: for a given version of the [=PACT Methodology=]. It is recommended to use the latest version of the Methodology.
	//   : `PAS2050`
	//   :: for the Publicly Available Specification (PAS) 2050, "Specification for the assessment of the life cycle greenhouse gas emissions of goods and services". The use of this standard is permitted but not recommended.
	//
	// The enumeration of standards above CAN evolve in future revisions. A host system MUST accept ProductFootprints from later revisions with `crossSectoralStandards` containing values that are not defined in this specification.
	CrossSectoralStandards []string               `json:"crossSectoralStandards"`
	DeclaredUnitAmount     PositiveNonZeroDecimal `json:"declaredUnitAmount"`

	// DeclaredUnitOfMeasurement The unit of measurement of the product. Together with `declaredUnitAmount`
	// this defines the 'declared unit' of the product. Emissions in this carbon
	// footprint are expressed in kgCO2e per 'declared unit'.
	//
	// For example: a PCF for a 12.5 liter bottle of Ethanol states 2 kg of CO2e in
	// emissions. In this case the declared unit is 12.5 liter Ethanol, thus the
	// `declaredUnitOfMeasurement` is "liter", and the `declaredUnitAmount` is "12.5".
	// The `pcfIncludingBiogenicUptake` is "2.0" kgCO2e per "12.5 liter" of Ethanol.
	DeclaredUnitOfMeasurement CarbonFootprintDeclaredUnitOfMeasurement `json:"declaredUnitOfMeasurement"`

	// Dqi Data type DataQualityIndicators contains the quantitative data quality indicators.
	Dqi *DataQualityIndicators `json:"dqi,omitempty"`

	// ExemptedEmissionsDescription Rationale behind exclusion of specific PCF emissions, CAN be the empty string if no emissions were excluded.
	ExemptedEmissionsDescription string                `json:"exemptedEmissionsDescription,omitempty"`
	ExemptedEmissionsPercent     Decimal               `json:"exemptedEmissionsPercent"`
	FossilCarbonContent          PositiveOrZeroDecimal `json:"fossilCarbonContent"`
	FossilGhgEmissions           PositiveOrZeroDecimal `json:"fossilGhgEmissions"`

	// GeographyCountry If present, the value MUST conform to the [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
	// country code.
	// See [[#dt-carbonfootprint-scope]] for further details.
	GeographyCountry string `json:"geographyCountry,omitempty"`

	// GeographyCountrySubdivision If present, a [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) country and subdivision code. See [[#dt-carbonfootprint-scope]] for further details.
	GeographyCountrySubdivision string `json:"geographyCountrySubdivision,omitempty"`

	// GeographyRegionOrSubregion If present, the value MUST be one of the [=UN geographic regions=] or [=UN geographic subregions=]. See [[#dt-carbonfootprint-scope]] for further details. Additionally, see the [=PACT Methodology=] Section 3.2.3.
	GeographyRegionOrSubregion CarbonFootprintGeographyRegionOrSubregion `json:"geographyRegionOrSubregion,omitempty"`

	// IpccCharacterizationFactors The characterization factors from one or more IPCC Assessment Reports used in the calculation of the PCF.
	// It MUST be a non-empty set of strings with the format `AR$VERSION$`, where `$VERSION$` stands for the
	// IPCC report version number and MUST be an integer.
	//
	// Per the Methodology the latest available characterization factor version shall be used, i.e., `["AR6"]`. In the event this is not possible, include the set of all characterization factors used.
	IpccCharacterizationFactors        []string              `json:"ipccCharacterizationFactors"`
	LandAreaOccupation                 PositiveOrZeroDecimal `json:"landAreaOccupation,omitempty"`
	LandCarbonLeakage                  PositiveOrZeroDecimal `json:"landCarbonLeakage,omitempty"`
	LandManagementBiogenicCO2Emissions PositiveOrZeroDecimal `json:"landManagementBiogenicCO2Emissions,omitempty"`
	LandManagementBiogenicCO2Removals  NegativeOrZeroDecimal `json:"landManagementBiogenicCO2Removals,omitempty"`
	LandManagementFossilGhgEmissions   PositiveOrZeroDecimal `json:"landManagementFossilGhgEmissions,omitempty"`
	LandUseChangeGhgEmissions          PositiveOrZeroDecimal `json:"landUseChangeGhgEmissions,omitempty"`
	OutboundLogisticsGhgEmissions      PositiveOrZeroDecimal `json:"outboundLogisticsGhgEmissions,omitempty"`
	PackagingBiogenicCarbonContent     PositiveOrZeroDecimal `json:"packagingBiogenicCarbonContent,omitempty"`

	// PackagingEmissionsIncluded Indicates whether packaging emissions are included in the scope
	// and boundary of the product carbon footprint.
	//
	// If `true`, packaging emissions are included in the product carbon
	// footprint, and the `packagingGhgEmissions` property SHOULD be defined.
	//
	// If `false`, packaging emissions are not included in the product carbon
	// footprint, and the `packagingGhgEmissions` property MUST be undefined.
	PackagingEmissionsIncluded *bool                 `json:"packagingEmissionsIncluded,omitempty"`
	PackagingGhgEmissions      PositiveOrZeroDecimal `json:"packagingGhgEmissions,omitempty"`
	PcfExcludingBiogenicUptake Decimal               `json:"pcfExcludingBiogenicUptake"`
	PcfIncludingBiogenicUptake Decimal               `json:"pcfIncludingBiogenicUptake"`
	PrimaryDataShare           Decimal               `json:"primaryDataShare,omitempty"`
	ProductMassPerDeclaredUnit Decimal               `json:"productMassPerDeclaredUnit"`

	// ProductOrSectorSpecificRules The product-specific or sector-specific rules applied for calculating or allocating GHG emissions. If no product or sector specific rules were followed, this set MUST be empty.
	ProductOrSectorSpecificRules []ProductOrSectorSpecificRule `json:"productOrSectorSpecificRules,omitempty"`
	RecycledCarbonContent        PositiveOrZeroDecimal         `json:"recycledCarbonContent,omitempty"`

	// ReferencePeriodEnd The end (exclusive) of the time boundary for which the PCF value is
	// considered to be representative. Specifically, this end date
	// represents the latest date from which activity data was collected
	// to include in the PCF calculation.
	ReferencePeriodEnd time.Time `json:"referencePeriodEnd"`

	// ReferencePeriodStart The start (inclusive) of the time boundary for which the PCF value
	// is considered to be representative. Specifically, this start date
	// represents the earliest date from which activity data was collected
	// to include in the PCF calculation.
	ReferencePeriodStart time.Time `json:"referencePeriodStart"`

	// SecondaryEmissionFactorSources If secondary data was used to calculate the <{CarbonFootprint}>, then it MUST include the property <{CarbonFootprint/secondaryEmissionFactorSources}> with value the emission factors used for the <{CarbonFootprint}> calculation.
	//
	// If no secondary data is used, this property MUST BE undefined.
	SecondaryEmissionFactorSources []EmissionFactorSource `json:"secondaryEmissionFactorSources,omitempty"`

	// TechnologicalCO2CaptureOrigin For CCU: Information about the origin (fossil or biogenic) and path of the captured CO2 used in CCU, including
	// the name and location of the capture facility. This information enhances transparency and traceability,
	// enabling tracking of CO2 across the value chain.
	//
	// For CCS: Traceability data, i.e. information on location injection site, geological reservoir as part of the overall
	// technological CO2 capture origin data point for the PCF.
	TechnologicalCO2CaptureOrigin string                `json:"technologicalCO2CaptureOrigin,omitempty"`
	TechnologicalCO2Removals      PositiveOrZeroDecimal `json:"technologicalCO2Removals,omitempty"`

	// Verification Contains the verification in conformance with the PACT Methodology.
	Verification *Verification `json:"verification,omitempty"`
}

// CarbonFootprintCcuCalculationApproach The calculation approach for CCU: "Cut-off" or "Credit."
type CarbonFootprintCcuCalculationApproach string

// CarbonFootprintDeclaredUnitOfMeasurement The unit of measurement of the product. Together with `declaredUnitAmount`
// this defines the 'declared unit' of the product. Emissions in this carbon
// footprint are expressed in kgCO2e per 'declared unit'.
//
// For example: a PCF for a 12.5 liter bottle of Ethanol states 2 kg of CO2e in
// emissions. In this case the declared unit is 12.5 liter Ethanol, thus the
// `declaredUnitOfMeasurement` is "liter", and the `declaredUnitAmount` is "12.5".
// The `pcfIncludingBiogenicUptake` is "2.0" kgCO2e per "12.5 liter" of Ethanol.
type CarbonFootprintDeclaredUnitOfMeasurement string

// CarbonFootprintGeographyRegionOrSubregion If present, the value MUST be one of the [=UN geographic regions=] or [=UN geographic subregions=]. See [[#dt-carbonfootprint-scope]] for further details. Additionally, see the [=PACT Methodology=] Section 3.2.3.
type CarbonFootprintGeographyRegionOrSubregion string

// DataModelExtension Each data model extension MUST be a valid JSON object conforming with the
// [JSON Representation of a Data Model Extension](https://wbcsd.github.io/data-model-extensions/spec/#instantiation).
//
// See [[!DATA-MODEL-EXTENSIONS]] for technical details and [[!EXTENSIONS-GUIDANCE]] for data model extension guidance.
type DataModelExtension struct {
	// Data The value MUST be a JSON Object that conforms to the extension schema file
	// referenced by the dataSchema property.
	Data map[string]interface{} `json:"data"`

	// DataSchema The value MUST be the URL to the publicly accessible Extension Schema File
	DataSchema string `json:"dataSchema"`

	// Documentation The value MUST be the URL to the publicly accessible Extension Documentation.
	Documentation string `json:"documentation,omitempty"`

	// Specversion The version of the Data Model Extension specification. The value
	// MUST be a string in the format major.minor.patch as defined in
	// Semantic Versioning 2.0.0.
	Specversion string `json:"specversion,omitempty"`
}

// DataQualityIndicators Data type DataQualityIndicators contains the quantitative data quality indicators.
type DataQualityIndicators struct {
	GeographicalDQR  Decimal `json:"geographicalDQR"`
	TechnologicalDQR Decimal `json:"technologicalDQR"`
	TemporalDQR      Decimal `json:"temporalDQR"`
}

// Decimal defines model for Decimal.
type Decimal = string

// EmissionFactorSource References emission factor databases, see [=PACT Methodology=] Section 4.1.3.2.
//
// ```json
//
//	{
//	  "name": "ecoinvent",
//	  "version": "3.9.1"
//	}
//
// ```
type EmissionFactorSource struct {
	Name    NonEmptyString `json:"name"`
	Version NonEmptyString `json:"version"`
}

// Error Object with error code and description, to be returned by the API methods in case of error.
// See [[#api-error-handling]] for details.
type Error struct {
	// Code Error code identifier.
	Code ErrorCode `json:"code"`

	// Message Human readable error message.
	Message string `json:"message"`
}

// ErrorCode Error code identifier.
type ErrorCode string

// ForbiddenResponse Access Denied.
//
// Response body MUST contain a JSON <{Error}> object
type ForbiddenResponse = interface{}

// InternalErrorResponse Internal Error.
//
// Response body MUST contain a JSON <{Error}> object
type InternalErrorResponse = interface{}

// NegativeNonZeroDecimal defines model for NegativeNonZeroDecimal.
type NegativeNonZeroDecimal = string

// NegativeOrZeroDecimal defines model for NegativeOrZeroDecimal.
type NegativeOrZeroDecimal = string

// NonEmptyString defines model for NonEmptyString.
type NonEmptyString = string

// NotFoundResponse Not found.
//
// Response body MUST contain a JSON <{Error}> object
type NotFoundResponse = interface{}

// NotImplementedResponse Not implemented.
//
// Response body MUST contain a JSON <{Error}> object
type NotImplementedResponse = interface{}

// PositiveNonZeroDecimal defines model for PositiveNonZeroDecimal.
type PositiveNonZeroDecimal = string

// PositiveOrZeroDecimal defines model for PositiveOrZeroDecimal.
type PositiveOrZeroDecimal = string

// ProductFootprint `ProductFootprint` is a data type which represents the carbon footprint
// of a product under a specific scope ([[#dt-carbonfootprint-scope]])
// and with values calculated in accordance with the [=PACT Methodology=].
//
// The objective of a `ProductFootprint` is to provide interoperability between
// the creator (the [=data owner=]) and the consumer (the [=data recipient=]) of
// ProductFootprints. The details on the exchange of ProductFootprints are
// specified in [[#api]].
//
// Conceptually, the data type <{ProductFootprint}> is modeled as a multi-purpose
// container for product-specific emission factors which is supported by
// extensibility through [=Data Model Extensions=].
//
// Data Model Extensions enable [=data owners=] to exchange additional information
// related to a product with [=data recipients=]. The details are specified
// in [[#datamodelextension]] as well as [[!EXTENSIONS-GUIDANCE]], and [[!DATA-MODEL-EXTENSIONS]].
//
// Each `ProductFootprint` can and should be updated over time, for instance to
// incorporate new or refined data from [=data owners=] (see [[#lifecycle]]).
type ProductFootprint struct {
	// Comment Any additional information related to the PCF. Whereas the property productDescription
	// contains product-level information, comment should be used for information and instructions
	// related to the calculation of the PCF, or other information which informs the ability to interpret
	// (e.g. LUC not included as unable to calculate LUC), to audit, or to verify the PCF.
	//
	//
	// Information explaining the current status of the PCF, what was changed since the last version, etc. If the PCF was changed since a previous version, indicate all methodological and/or production process change(s) that occurred to result in the PCF change. For example, include the relevant change(s) from the list below:
	//
	// 1. In case product or sector specific guidance used does not align with PACT Methodology's requirement, the areas of disalignment should be specified in the comment section (e.g. allocation rules, exemption rules, data quality metrics).
	//
	// 2. Information explaining the current status of the PCF, what was changed since the last version, etc. If the PCF was changed since a previous version, indicate all methodological and/or production process change(s) that occurred to result in the PCF change. E.g., include the relevant change(s) from the list below:
	//
	// Methodological:
	//  - Access to new Emission Factor data (database, supplier-specific, company-specific)
	//  - Updated upstream data (i.e. upstream supplier updated their PCF based on methodology change)
	//
	// Production Process:
	//  - Change in process
	//  - Change in feedstock
	//  - Change from conventional to certified sustainable material
	//  - Change in energy source
	//  - Change in upstream supplier
	//  - Updated upstream data (i.e. upstream supplier updated their PCF based on process change)
	//
	//  3. Additional information on biogenic emissions & removals calculation  should be specified. This includes information on tools used for  calculations (e.g. Cool Farm Tool), and methodological choices made in calculation of biogenic emissions and removals (e.g. Statistical  or Direct Land use change calculation for DLUC calculations).
	Comment string `json:"comment,omitempty"`

	// CompanyIds The non-empty set of Uniform Resource Names ([[!RFC8141|URN]]). Each value of
	// this set is supposed to uniquely identify the ProductFootprint Data Owner.
	CompanyIds  []Urn          `json:"companyIds"`
	CompanyName NonEmptyString `json:"companyName"`

	// Created The date and time when the PCF was created. This is typically an automatically
	// generated field by the solution. It SHOULD NOT be used to derive status of
	// validity of the PCF.
	//
	// See [[#lifecycle]] for details.
	Created time.Time `json:"created"`

	// Extensions If defined, 1 or more data model extensions associated with the ProductFootprint.
	// See <{DataModelExtension}> for details.
	Extensions []DataModelExtension `json:"extensions,omitempty"`

	// ID A unique identifier that a system uses to refer to the entire dataset of the PCF.
	// This is typically an automatically-generated number by the solution to maintain
	// the required technical references to data within the system.
	ID string `json:"id"`

	// Pcf A CarbonFootprint represents the carbon footprint of a product and related data in accordance with the [=PACT Methodology=].
	//
	// ### Scope of a CarbonFootprint ### {#dt-carbonfootprint-scope}
	//
	// Each CarbonFootprint is scoped by
	// 1. Time Period: the time period is defined by the properties <{CarbonFootprint/referencePeriodStart}> and <{CarbonFootprint/referencePeriodEnd}> (see [=PACT Methodology=] section 3.2.3)
	// 2. Geography: further set by the properties <{CarbonFootprint/geographyRegionOrSubregion}>, <{CarbonFootprint/geographyCountry}>, and <{CarbonFootprint/geographyCountrySubdivision}> (see [=PACT Methodology=] section 3.2.3)
	//
	// If a CarbonFootprint
	// 1. Has geographical granularity `Global`, then the properties <{CarbonFootprint/geographyCountry}> and <{CarbonFootprint/geographyRegionOrSubregion}> and <{CarbonFootprint/geographyCountrySubdivision}> MUST be `undefined`;
	// 2. Has a regional or sub-regional geographical granularity, then the property <{CarbonFootprint/geographyRegionOrSubregion}> MUST be `defined` and the properties <{CarbonFootprint/geographyCountry}> and <{CarbonFootprint/geographyCountrySubdivision}> MUST be `undefined`;
	// 3. Has a country-specific geographical granularity, then property <{CarbonFootprint/geographyCountry}> MUST be `defined` AND the properties <{CarbonFootprint/geographyRegionOrSubregion}> and <{CarbonFootprint/geographyCountrySubdivision}> MUST be `undefined`;
	// 4. Has a country subdivision-specific geographical granularity, then property <{CarbonFootprint/geographyCountrySubdivision}> MUST be `defined` AND the properties <{CarbonFootprint/geographyRegionOrSubregion}> and <{CarbonFootprint/geographyCountry}> MUST be `undefined`.
	Pcf CarbonFootprint `json:"pcf"`

	// PrecedingPfIds A given PCF may change over time, due to updates to the calculation.
	// This is a list of IDs that reflect "past versions" of the current PCF,
	// maintained by the solution. If defined, MUST be non-empty set of IDs.
	//
	// See [[#lifecycle]] for details.
	PrecedingPfIds []string `json:"precedingPfIds,omitempty"`

	// ProductClassifications The non-empty set of Product Classifications in [[!RFC8141|URN]] format. Each of the values
	// in the set can classify the product as part of distinct groupings and categorizations.
	// See [[#product-classification-urns]].
	ProductClassifications []Urn `json:"productClassifications,omitempty"`

	// ProductDescription The free-form description of the product, including any additional relevant information
	// such as production technology, packaging, process, feedstock and technical parameters
	// (e.g. dimensions). Products which are services (i.e. consulting) should include a short
	// description of the service.
	ProductDescription string `json:"productDescription"`

	// ProductIds The non-empty set of Product IDs in [[!RFC8141|URN]] format. Each of the values in the set is
	// supposed to uniquely identify the product. See [[#product-identifier-urns]] for syntax and
	// examples.
	ProductIds         []Urn          `json:"productIds"`
	ProductNameCompany NonEmptyString `json:"productNameCompany"`

	// SpecVersion The version of the PACT Technical Specifications that the data being shared complies with.
	// This is a string in the format of "major.minor.patch" (e.g. "3.0.0").
	SpecVersion string `json:"specVersion"`

	// Status The status of the PCF. `Active` means that the PCF is the most recent version
	// and is the one that SHOULD be used by a data recipient, e.g. for product
	// footprint calculations. `Deprecated` means that the PCF is no longer
	// the most recent version and SHOULD NOT be used by data recipients.
	//
	// See [[#lifecycle]] for details.
	Status ProductFootprintStatus `json:"status"`

	// ValidityPeriodEnd The end date and time of the validity period. After this date the ProductFootprint
	// is not valid for use anymore. See [[#validity-period]] for more details.
	ValidityPeriodEnd time.Time `json:"validityPeriodEnd,omitzero"`

	// ValidityPeriodStart The start date of the validity period: the time interval during which the
	// ProductFootprint is declared as valid for use by a receiving [=data recipient=].
	//
	// If no validity period is specified, the ProductFootprint is valid for 3 years after
	// the <{CarbonFootprint/referencePeriodEnd}>
	//
	// See [[#validity-period]] for details.
	ValidityPeriodStart time.Time `json:"validityPeriodStart,omitzero"`
}

// ProductFootprintStatus The status of the PCF. `Active` means that the PCF is the most recent version
// and is the one that SHOULD be used by a data recipient, e.g. for product
// footprint calculations. `Deprecated` means that the PCF is no longer
// the most recent version and SHOULD NOT be used by data recipients.
//
// See [[#lifecycle]] for details.
type ProductFootprintStatus string

// ProductOrSectorSpecificRule A ProductOrSectorSpecificRule refers to a set of product or sector specific rules published by a specific operator and applied during product carbon footprint calculation.
type ProductOrSectorSpecificRule struct {
	// Operator Selection of operator of PCR being used for the PCF calculation. If
	// operator is not available in the given list, or if a sector specific
	// guidance has been followed, please set "Other" and include details
	// under "otherOperatorName".
	Operator ProductOrSectorSpecificRuleOperator `json:"operator"`

	// OtherOperatorName If operator is Other, then this attribute must be populated with the name
	// of the operator.
	OtherOperatorName string `json:"otherOperatorName,omitempty"`

	// RuleNames Names of the product or sector specific rules being used for the PCF
	// calculation.
	RuleNames []string `json:"ruleNames"`
}

// ProductOrSectorSpecificRuleOperator Selection of operator of PCR being used for the PCF calculation. If
// operator is not available in the given list, or if a sector specific
// guidance has been followed, please set "Other" and include details
// under "otherOperatorName".
type ProductOrSectorSpecificRuleOperator string

// PublishedEvent Base class for all events, it follows the CloudEvents specification.
type PublishedEvent = BaseEvent

// RequestCreatedEvent Base class for all events, it follows the CloudEvents specification.
type RequestCreatedEvent = BaseEvent

// RequestCreatedEventData Criteria for filtering ProductFootprint requests.
type RequestCreatedEventData struct {
	// Classification One or more product classifications. Will return all footprints with corresponding values in the `productClassifications` attribute. Note that a footprint itself can have multiple classifications. The match must be-case insensitive.
	Classification []string `json:"classification,omitempty"`

	// Comment Free text comment.
	Comment string `json:"comment,omitempty"`

	// CompanyID One or more company IDs. Will return all footprints which have a corresponding ID in their `companyId` attribute. The match must be case-insensitive. Note that a footprint itself can also have multiple company IDs.
	CompanyID []string `json:"companyId,omitempty"`

	// Geography One or more geographic specifiers. Values specified can denote `geographyRegion` or `geographyCountry` or `geographyCountrySubdivision`. Will return all footprints within the specified geography(s). The match must be-case insensitive.
	Geography []string `json:"geography,omitempty"`

	// ProductID One or more product IDs. Will return all footprints which have a corresponding ID in their `productIds` attribute. The match must be-case insensitive. Note that a footprint itself can also have multiple product IDs.
	ProductID []string `json:"productId,omitempty"`

	// Status If present, MUST be "Active" or "Deprecated". If not specified, will return footprints regardless of status. The match must be-case insensitive.
	Status RequestCreatedEventDataStatus `json:"status,omitempty"`

	// ValidAfter If present, MUST match PCFs with a validity period start > validAfter.
	// See [[#validity-period]] for determining validity period.
	ValidAfter time.Time `json:"validAfter,omitzero"`

	// ValidBefore If present, MUST match PCFs with a validity period end < validBefore
	// See [[#validity-period]] for determining validity period.
	ValidBefore time.Time `json:"validBefore,omitzero"`

	// ValidOn If present, MUST match all PCFs which were valid on the date specified: start validity period <= validOn <= end validity period. See [[#validity-period]] for determining validity period.
	ValidOn time.Time `json:"validOn,omitzero"`
}

// RequestCreatedEventDataStatus If present, MUST be "Active" or "Deprecated". If not specified, will return footprints regardless of status. The match must be-case insensitive.
type RequestCreatedEventDataStatus string

// RequestFulfilledEvent Base class for all events, it follows the CloudEvents specification.
type RequestFulfilledEvent = BaseEvent

// RequestRejectedEvent Base class for all events, it follows the CloudEvents specification.
type RequestRejectedEvent = BaseEvent

// TokenExpiredResponse Token expired.
//
// Response body MUST contain a JSON <{Error}> object
type TokenExpiredResponse = interface{}

// UnauthorizedResponse The request is not authorized, the access token is invalid or has expired.
//
// Response body MUST contain a JSON <{Error}> object
type UnauthorizedResponse = interface{}

// URI defines model for Uri.
type URI = string

// Urn defines model for Urn.
type Urn = string

// Verification Contains the verification in conformance with the PACT Methodology.
type Verification struct {
	// Comments Any additional comments that will clarify the interpretation of the verification.
	Comments string `json:"comments,omitempty"`

	// CompletedAt The date at which the verification was completed
	CompletedAt time.Time `json:"completedAt,omitzero"`

	// Coverage The coverage of the verification defines the type and level of GHG data to be verified.
	Coverage VerificationCoverage `json:"coverage,omitempty"`

	// ProviderName The non-empty name of the independent third party engaged to undertake the verification.
	ProviderName string `json:"providerName,omitempty"`

	// StandardName Name of the standard against which the PCF was assured
	StandardName string `json:"standardName,omitempty"`
}

// VerificationCoverage The coverage of the verification defines the type and level of GHG data to be verified.
type VerificationCoverage string

// Classification defines model for classification.
type Classification = []Urn

// CompanyID defines model for companyId.
type CompanyID = []Urn

// Geography defines model for geography.
type Geography = []string

// ProductID defines model for productId.
type ProductID = []Urn

// Status defines model for status.
type Status string

// ValidAfter defines model for validAfter.
type ValidAfter = time.Time

// ValidBefore defines model for validBefore.
type ValidBefore = time.Time

// ValidOn defines model for validOn.
type ValidOn = time.Time
