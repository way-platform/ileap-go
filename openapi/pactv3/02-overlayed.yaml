openapi: 3.1.0
info:
    title: PACT API Specification
    summary: Technical Specifications for PCF Data Exchange
    version: 3.0.1
    contact:
        name: WBCSD PACT Project
        url: https://github.com/wbcsd
        email: pact@wbcsd.org
    description: "This document describes the technical specifications for the exchange of \nProduct Carbon Footprint (PCF) data between systems. The specification is \nmaintained by the WBCSD PACT project and intended to be used by organizations \nthat wish to exchange PCF data with other organizations. The specifications \nare designed to be technology-agnostic.\n"
    x-rule: |4
        SHALL = Required to report on
        BIO = Required if biogenic and land sector related emissions are applicable, 0 if not applicable, blank if unknown or unavailable
        BIO-2027 = Required by 31/12/2027 if biogenic and land sector related emissions are applicable , 0 if not applicable, blank if unknown or unavalaible
        CCU = Required if CCU applicable and data known and available, blank otherwise
        CCS = Required if CCS applicable and data known and available, blank otherwise
        SHOULD = Recommended to report on in, exceptions possible
        MAY = Optional

        https://www.iso.org/foreword-supplementary-information.html
    x-methodology-sections:
        3.1.2: Hierarchy of application
        3.2: Scope and boundary
        3.2.2: Focus on GHG emissions
        3.2.3: Scope and boundary of the PACT Methodology
        3.2.4: Unit of analysis
        3.3.1: Calculation of product GHG emissions
        3.3.1.1: Data identification
        3.3.1.2: Criteria to exclude certain activities - Exemption rules
        3.3.2.1: Accounting for transportation and distribution emissions
        3.3.2.2: Accounting for waste treatment and recycling emissions within the Cradle-to-Gate boundary
        3.3.2.4: Accounting for biogenic emissions and removals
        3.3.2.5: Technological CO2 capture, storage and use
        3.3.1.3: Allocation
        4.2.2: Primary Data Share
        4.2.3: Data quality indicators (DQIs) assessment
tags:
    - name: footprint
      description: Synchronous retrieval of footprints
    - name: event
      description: Asynchronous Event API. This API is used to post events to the system. Data recipients can request footprints and will receive notifications when these requests are fulfilled or rejected. Data owners can post updated and newly published footprints to data recipients.
servers:
    - url: https://example.com
components:
    schemas:
        ProductFootprint:
            description: |
                `ProductFootprint` is a data type which represents the carbon footprint
                of a product under a specific scope ([[#dt-carbonfootprint-scope]])
                and with values calculated in accordance with the [=PACT Methodology=].

                The objective of a `ProductFootprint` is to provide interoperability between
                the creator (the [=data owner=]) and the consumer (the [=data recipient=]) of
                ProductFootprints. The details on the exchange of ProductFootprints are
                specified in [[#api]].

                Conceptually, the data type <{ProductFootprint}> is modeled as a multi-purpose
                container for product-specific emission factors which is supported by
                extensibility through [=Data Model Extensions=].

                Data Model Extensions enable [=data owners=] to exchange additional information
                related to a product with [=data recipients=]. The details are specified
                in [[#datamodelextension]] as well as [[!EXTENSIONS-GUIDANCE]], and [[!DATA-MODEL-EXTENSIONS]].

                Each `ProductFootprint` can and should be updated over time, for instance to
                incorporate new or refined data from [=data owners=] (see [[#lifecycle]]).
            summary: |
                The ProductFootprint represents the footprint of a product.
            type: object
            title: ProductFootprint
            required:
                - id
                - specVersion
                - created
                - status
                - companyName
                - companyIds
                - productDescription
                - productIds
                - productNameCompany
                - pcf
            properties:
                id:
                    description: "A unique identifier that a system uses to refer to the entire dataset of the PCF. \nThis is typically an automatically-generated number by the solution to maintain \nthe required technical references to data within the system. \n"
                    type: string
                    examples:
                        - "f4b1225a-bd44-4c8e-861d-079e4e1dfd69"
                    x-go-type-skip-optional-pointer: true
                specVersion:
                    description: "The version of the PACT Technical Specifications that the data being shared complies with. \nThis is a string in the format of \"major.minor.patch\" (e.g. \"3.0.0\").\n"
                    type: string
                    pattern: '^\d+\.\d+\.\d+(-\d{8})?$'
                    examples:
                        - "3.0.0"
                    x-go-type-skip-optional-pointer: true
                precedingPfIds:
                    description: "A given PCF may change over time, due to updates to the calculation. \nThis is a list of IDs that reflect \"past versions\" of the current PCF,\nmaintained by the solution. If defined, MUST be non-empty set of IDs.\n\nSee [[#lifecycle]] for details.\n"
                    x-rule: SHOULD
                    type: array
                    items:
                        type: string
                        x-go-type-skip-optional-pointer: true
                    minItems: 1
                    uniqueItems: true
                    examples:
                        - ["f4b1225a-bd44-4c8e-861d-079e4e1dfd69", "079e425a-464f-528d-341d-4a944a1dfd70"]
                    x-go-type-skip-optional-pointer: true
                # version:
                #   description: |
                #     The version number of the PCF. Starting with version 3.0, any change to a
                #     PCF will generate a new ID, so this field is no longer needed.

                #     See [[#lifecycle]] for details.
                #   note: Deprecated in 3.0. MUST be 1.
                #   type: integer
                #   format: int32
                #   minimum: 0
                created:
                    description: "The date and time when the PCF was created. This is typically an automatically \ngenerated field by the solution. It SHOULD NOT be used to derive status of \nvalidity of the PCF. \n\nSee [[#lifecycle]] for details.\n"
                    type: string
                    format: date-time
                    examples:
                        - '2024-10-31T00:00:00Z'
                    x-go-type-skip-optional-pointer: true
                # updated:
                #   description: |
                #     The date and time when the PCF was last updated. Starting 3.0  any change to 
                #     a PCF will generate a new ProductFootprint, which is immutable, leaving 
                #     the updated property redundant.

                #     See [[#lifecycle]] for details.
                #   note: Deprecated in 3.0.
                #   type: string
                #   format: date-time
                status:
                    description: "The status of the PCF. `Active` means that the PCF is the most recent version \nand is the one that SHOULD be used by a data recipient, e.g. for product \nfootprint calculations. `Deprecated` means that the PCF is no longer \nthe most recent version and SHOULD NOT be used by data recipients.\n\nSee [[#lifecycle]] for details.\n"
                    type: string
                    enum:
                        - Active
                        - Deprecated
                    examples:
                        - Active
                    x-go-type-skip-optional-pointer: true
                validityPeriodStart:
                    description: "The start date of the validity period: the time interval during which the \nProductFootprint is declared as valid for use by a receiving [=data recipient=].\n\nIf no validity period is specified, the ProductFootprint is valid for 3 years after\nthe <{CarbonFootprint/referencePeriodEnd}>\n\nSee [[#validity-period]] for details.\n"
                    summary: "The start date and time of the validity period. The period of time between the \nvalidityPeriodStart and validityPeriodEnd is defined as the \"validity period\", \nand represents the time period during which the PCF is valid. Specifying the \nvalidity period is optional. If this is not specified, then it is assumed the \nPCF is valid for 3 years, starting from the referencePeriodEnd. \n"
                    type: string
                    format: date-time
                    x-term: Validity Period
                    x-methodology: 3.2.3
                    x-go-type-skip-optional-pointer: true
                validityPeriodEnd:
                    description: |
                        The end date and time of the validity period. After this date the ProductFootprint
                        is not valid for use anymore. See [[#validity-period]] for more details.
                    type: string
                    format: date-time
                    x-term: Validity Period
                    x-methodology: 3.2.3
                    x-go-type-skip-optional-pointer: true
                companyName:
                    description: |
                        The name of the company that is the PCF Data Owner
                    $ref: '#/components/schemas/NonEmptyString'
                companyIds:
                    description: "The non-empty set of Uniform Resource Names ([[!RFC8141|URN]]). Each value of \nthis set is supposed to uniquely identify the ProductFootprint Data Owner. \n"
                    summary: "A list of company identifiers which represent the companies that are considered \ndata owners of the PCF. In a large organization, this may include multiple\nsubsidiaries or legal entities of a given corporation, hence the need to provide \nmultiple identifiers. A list of only one identifier is also valid. The format \nof each companyID MUST be provided as a Uniform Resource Names ([[!RFC8141|URN]]),\nwhich helps ensure the data provided is standardized and can be interpreted by the \nreceiving system.\n"
                    examples:
                        - ["urn:company:example:company1"]
                        - ["urn:company:example:company1", "urn:company:example:company2"]
                    type: array
                    minItems: 1
                    uniqueItems: true
                    items:
                        $ref: '#/components/schemas/Urn'
                    x-go-type-skip-optional-pointer: true
                productDescription:
                    description: "The free-form description of the product, including any additional relevant information \nsuch as production technology, packaging, process, feedstock and technical parameters \n(e.g. dimensions). Products which are services (i.e. consulting) should include a short\ndescription of the service.\n"
                    type: string
                    x-go-type-skip-optional-pointer: true
                productIds:
                    description: "The non-empty set of Product IDs in [[!RFC8141|URN]] format. Each of the values in the set is \nsupposed to uniquely identify the product. See [[#product-identifier-urns]] for syntax and\nexamples.\n"
                    summary: "All relevant product identifiers to identify the product for which the provided \nPCF was calculated (e.g. supplier part number, GTIN, article number, batch number, etc.)\n"
                    type: array
                    minItems: 1
                    uniqueItems: true
                    items:
                        $ref: '#/components/schemas/Urn'
                    x-go-type-skip-optional-pointer: true
                productClassifications:
                    description: "The non-empty set of Product Classifications in [[!RFC8141|URN]] format. Each of the values \nin the set can classify the product as part of distinct groupings and categorizations. \nSee [[#product-classification-urns]].\n"
                    note: Replaces productCategoryCpc deprecated in 2.3
                    summary: "A list of classification or category identifiers in URN format. Use well known urn's here, \nor adhere to recommended urn:pact: format. For example UN CPC, CAS Numbr, CN Code etc.\n\nThis replaces the productCategoryCpc property from 2.0.\n"
                    type: array
                    minItems: 1
                    uniqueItems: true
                    items:
                        $ref: '#/components/schemas/Urn'
                    examples:
                        - ["urn:pact:productclassification:un-cpc:1234"]
                        - ["urn:pact:productclassification:un-cpc:1234", "urn:pact:productclassification:cas:1234"]
                    x-go-type-skip-optional-pointer: true
                productNameCompany:
                    description: |
                        The name with which the company producing the product refers to it, i.e. the product's trade name.
                        Recognizable by the receiver of the PCF information.
                    $ref: '#/components/schemas/NonEmptyString'
                comment:
                    description: "Any additional information related to the PCF. Whereas the property productDescription \ncontains product-level information, comment should be used for information and instructions \nrelated to the calculation of the PCF, or other information which informs the ability to interpret\n(e.g. LUC not included as unable to calculate LUC), to audit, or to verify the PCF.\n\n\nInformation explaining the current status of the PCF, what was changed since the last version, etc. If the PCF was changed since a previous version, indicate all methodological and/or production process change(s) that occurred to result in the PCF change. For example, include the relevant change(s) from the list below:\n\n1. In case product or sector specific guidance used does not align with PACT Methodology's requirement, the areas of disalignment should be specified in the comment section (e.g. allocation rules, exemption rules, data quality metrics).\n\n2. Information explaining the current status of the PCF, what was changed since the last version, etc. If the PCF was changed since a previous version, indicate all methodological and/or production process change(s) that occurred to result in the PCF change. E.g., include the relevant change(s) from the list below: \n\nMethodological:\n - Access to new Emission Factor data (database, supplier-specific, company-specific)\n - Updated upstream data (i.e. upstream supplier updated their PCF based on methodology change)\n\nProduction Process:\n - Change in process\n - Change in feedstock\n - Change from conventional to certified sustainable material\n - Change in energy source\n - Change in upstream supplier\n - Updated upstream data (i.e. upstream supplier updated their PCF based on process change)\n\n 3. Additional information on biogenic emissions & removals calculation  should be specified. This includes information on tools used for  calculations (e.g. Cool Farm Tool), and methodological choices made in calculation of biogenic emissions and removals (e.g. Statistical  or Direct Land use change calculation for DLUC calculations). \n"
                    type: string
                    x-rule: SHOULD
                    x-go-type-skip-optional-pointer: true
                pcf:
                    description: "The carbon footprint of the given product with value conforming to the data \ntype <{CarbonFootprint}>.\n"
                    summary: The carbon footprint of the given product.
                    $ref: '#/components/schemas/CarbonFootprint'
                extensions:
                    type: array
                    description: |
                        If defined, 1 or more data model extensions associated with the ProductFootprint.
                        See <{DataModelExtension}> for details.
                    items:
                        $ref: '#/components/schemas/DataModelExtension'
                    x-go-type-skip-optional-pointer: true
        CarbonFootprint:
            description: |
                A CarbonFootprint represents the carbon footprint of a product and related data in accordance with the [=PACT Methodology=].

                ### Scope of a CarbonFootprint ### {#dt-carbonfootprint-scope}

                Each CarbonFootprint is scoped by
                1. Time Period: the time period is defined by the properties <{CarbonFootprint/referencePeriodStart}> and <{CarbonFootprint/referencePeriodEnd}> (see [=PACT Methodology=] section 3.2.3)
                2. Geography: further set by the properties <{CarbonFootprint/geographyRegionOrSubregion}>, <{CarbonFootprint/geographyCountry}>, and <{CarbonFootprint/geographyCountrySubdivision}> (see [=PACT Methodology=] section 3.2.3)

                If a CarbonFootprint
                1. Has geographical granularity `Global`, then the properties <{CarbonFootprint/geographyCountry}> and <{CarbonFootprint/geographyRegionOrSubregion}> and <{CarbonFootprint/geographyCountrySubdivision}> MUST be `undefined`;
                2. Has a regional or sub-regional geographical granularity, then the property <{CarbonFootprint/geographyRegionOrSubregion}> MUST be `defined` and the properties <{CarbonFootprint/geographyCountry}> and <{CarbonFootprint/geographyCountrySubdivision}> MUST be `undefined`;
                3. Has a country-specific geographical granularity, then property <{CarbonFootprint/geographyCountry}> MUST be `defined` AND the properties <{CarbonFootprint/geographyRegionOrSubregion}> and <{CarbonFootprint/geographyCountrySubdivision}> MUST be `undefined`;
                4. Has a country subdivision-specific geographical granularity, then property <{CarbonFootprint/geographyCountrySubdivision}> MUST be `defined` AND the properties <{CarbonFootprint/geographyRegionOrSubregion}> and <{CarbonFootprint/geographyCountry}> MUST be `undefined`.
            summary: "The CarbonFootprint represents the carbon footprint of a product and related data \nin accordance with the PACT Methodology.\n"
            title: CarbonFootprint
            type: object
            required:
                - declaredUnitOfMeasurement
                - declaredUnitAmount
                - productMassPerDeclaredUnit
                - referencePeriodStart
                - referencePeriodEnd
                - pcfExcludingBiogenicUptake
                - pcfIncludingBiogenicUptake
                - fossilGhgEmissions
                - fossilCarbonContent
                - ipccCharacterizationFactors
                - crossSectoralStandards
                - exemptedEmissionsPercent
            properties:
                declaredUnitOfMeasurement:
                    description: "The unit of measurement of the product. Together with `declaredUnitAmount` \nthis defines the 'declared unit' of the product. Emissions in this carbon \nfootprint are expressed in kgCO2e per 'declared unit'. \n\nFor example: a PCF for a 12.5 liter bottle of Ethanol states 2 kg of CO2e in \nemissions. In this case the declared unit is 12.5 liter Ethanol, thus the\n`declaredUnitOfMeasurement` is \"liter\", and the `declaredUnitAmount` is \"12.5\".\nThe `pcfIncludingBiogenicUptake` is \"2.0\" kgCO2e per \"12.5 liter\" of Ethanol.\n"
                    type: string
                    enum:
                        - liter
                        - kilogram
                        - cubic meter
                        - kilowatt hour
                        - megajoule
                        - ton kilometer
                        - square meter
                        - piece
                        - hour
                        - megabit second
                    x-term: Declared Unit
                    x-methodology: 3.2.4
                    example: "liter"
                    x-go-type-skip-optional-pointer: true
                declaredUnitAmount:
                    description: "The amount of <{CarbonFootprint/declaredUnitOfMeasurement|units}> contained\nwithin the product to which the [[#carbonfootprint|PCF]] is referring. \n\nFor example: if the product is a car door weighing 80kg, `declaredUnitAmount` \nwill be `80` and `declaredUnitOfMeasurement` will be `kilogram`.\n"
                    summary: "The amount of units contained within the product to which the PCF refers. \nThis is not representing the total annual quantity supplied (e.g. if the product is \nsupplied in bulk in kg, which is the declared unit selected, the value MUST be 1)\n"
                    $ref: '#/components/schemas/PositiveNonZeroDecimal'
                    x-unit: declared unit
                    x-term: Declared Unit
                    x-methodology: 3.2.4
                    example: "12.5"
                productMassPerDeclaredUnit:
                    description: "The mass (in kg) of the product excluding packaging. The 'declared unit' is\nthe `declaredUnitAmount` times `declaredUnitOfMeasurement`.\n\nFor example, if the declared unit is `piece`, this attribute MUST be populated \nwith the mass of `declaredUnitAmount` pieces of the product. If the declared unit\nis `liter`, this attribute MUST be populated with the mass of `declaredUnitAmount` \nliters of the product.\n\nIf the product mass is not relevant (i.e. PCF is for an energy (kWh, MJ), \nlogistics (ton.km) or service related product), this attribute SHALL be populated \nwith `0`.\n\nFor the full list of declared units requiring to report a mass per declared unit \nattribute please refer to table 4 in the PACT Methodology.\n"
                    note: mandatory in 3.0, optional in v2.x
                    $ref: '#/components/schemas/Decimal'
                    x-term: Declared Unit
                    x-methodology: 3.2.4
                    example: "9.86"
                referencePeriodStart:
                    description: "The start (inclusive) of the time boundary for which the PCF value\nis considered to be representative. Specifically, this start date\nrepresents the earliest date from which activity data was collected\nto include in the PCF calculation. \n"
                    summary: "The start date and time of the earliest activity data used to calculate the \nPCF. This start date can be considered the start of the period over which \nthe given PCF is referencing, or reporting on.\n"
                    type: string
                    format: date-time
                    x-term: Reference period
                    x-methodology: 3.2.3
                    example: "2025-04-30T00:00:00+00:00"
                    x-go-type-skip-optional-pointer: true
                referencePeriodEnd:
                    description: |
                        The end (exclusive) of the time boundary for which the PCF value is
                        considered to be representative. Specifically, this end date
                        represents the latest date from which activity data was collected
                        to include in the PCF calculation.
                    summary: "The end date and time of the latest activity data used to calculate the PCF. \nThis end date can be considered the end of the period over which the given \nPCF is referencing, or reporting on.\n"
                    type: string
                    format: date-time
                    x-term: Reference period
                    x-methodology: 3.2.3
                    example: "2025-12-30T00:00:00Z"
                    x-go-type-skip-optional-pointer: true
                geographyRegionOrSubregion:
                    description: |
                        If present, the value MUST be one of the [=UN geographic regions=] or [=UN geographic subregions=]. See [[#dt-carbonfootprint-scope]] for further details. Additionally, see the [=PACT Methodology=] Section 3.2.3.
                    summary: "The geographic representation of the PCF should be reported at different \nlevels of granularity, depending on the preference of the data owner \n(e.g., at a plant, region, or country level). This attribute specifies \nthe geographic region to which the PCF refers, i.e. \"Africa\", \n\"Central Asia\", etc.\n"
                    type: string
                    x-rule: SHOULD
                    x-term: Region or Sub-Region
                    x-methodology: 3.2.3
                    enum:
                        - Africa
                        - Americas
                        - Asia
                        - Europe
                        - Oceania
                        - Australia and New Zealand
                        - Central Asia
                        - Eastern Asia
                        - Eastern Europe
                        - Latin America and the Caribbean
                        - Melanesia
                        - Micronesia
                        - Northern Africa
                        - Northern America
                        - Northern Europe
                        - Polynesia
                        - South-eastern Asia
                        - Southern Asia
                        - Southern Europe
                        - Sub-Saharan Africa
                        - Western Asia
                        - Western Europe
                    examples:
                        - "Eastern Asia"
                        - "Southern Europe"
                    x-go-type-skip-optional-pointer: true
                geographyCountry:
                    description: "If present, the value MUST conform to the [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) \ncountry code.\nSee [[#dt-carbonfootprint-scope]] for further details.\n"
                    summary: "The geographic representation of the PCF should be reported at different levels\nof granularity, depending on the preference of the data owner (e.g., at a \nplant, region, or country level). This field indicates the country to which \nthe PCF refers. The country name must be according to ISO 3166-1 alpha-2 \ncountry code (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\n"
                    type: string
                    pattern: '^[A-Z]{2}$'
                    comment: ISO 3166-1 alpha-2
                    x-rule: SHOULD
                    x-term: Country
                    x-methodology: 3.2.3
                    examples:
                        - US
                        - DE
                    x-go-type-skip-optional-pointer: true
                geographyCountrySubdivision:
                    description: |
                        If present, a [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) country and subdivision code. See [[#dt-carbonfootprint-scope]] for further details.
                    summary: "The geographic representation of the PCF should be reported at different \nlevels of granularity, depending on the preference of the data owner \n(e.g., at a plant, region, or country level). This attribute represents \nthe most granular (i.e. \"most specific\") geography, i.e. the specific \nsubdivision within a given country, for example New York State within \nthe USA. Follows ISO 3166-2 (https://en.wikipedia.org/wiki/ISO_3166-2)\n"
                    type: string
                    pattern: '^[A-Z]{2}-[A-Z0-9]{1,3}$'
                    comment: ISO 3166-2
                    x-rule: SHOULD
                    x-term: Country subdivision
                    x-methodology: 3.2.3
                    examples:
                        - US-CA
                        - DE-BW
                    x-go-type-skip-optional-pointer: true
                boundaryProcessesDescription:
                    description: "Brief description of the processes attributable to each life cycle stage included \nin the PCF (e.g. electricity consumption for manufacturing), especially those \nthat significantly contribute manufacturing steps of the product (including \ngeneral description of used technologies).\n"
                    note: optional in 3.0, was mandatory in 2.x
                    type: string
                    x-rule: SHOULD
                    x-methodology: 3.2
                    x-go-type-skip-optional-pointer: true
                pcfExcludingBiogenicUptake:
                    description: "The PCF of the product:\n\nIncluding:\n- All fossil emissions (CO2, CH4, N2O, HFCs, SF6, NF3, PFCs, HFEs, PFPEs, CFCs and HCFSs) from stationary/mobile combustion, industrial processes and fugitive emissions \n- All land sector-related related emissions (CO2, N2O, PFCs)\n- All biogenic emissions (biogenic CH4, biogenic CO2)\n- Land management removals and technological removals \n\nExcluding:\n- Biogenic Product CO2 uptake\n"
                    x-unit: kgCO2e/declared unit
                    x-comment: "PCF (Excl. biogenic CO2 uptake) = \n  fossilGhgEmissions + \n  landUseChangeGhgEmissions + \n  landManagementBiogenicCO2Emissions + \n  landManagementBiogenicCO2Removals + \n  technologicalCO2Removals + \n  ccsTechnologicalCO2Capture\n  biogenicNonCO2Emissions\n"
                    x-rule: SHALL
                    x-term: PCF Excluding biogenic CO2 uptake
                    x-methodology: 3.3.1
                    example: "5.14"
                    $ref: '#/components/schemas/Decimal'
                pcfIncludingBiogenicUptake:
                    description: "The PCF of the product:\n\nIncluding:\n- All fossil emissions (CO2, CH4, N2O, HFCs, SF6, NF3, PFCs, HFEs, PFPEs, CFCs and HCFSs) from stationary/mobile combustion, industrial processes and fugitive emissions \n- All land sector-related related emissions (CO2, N2O, PFCs)\n- All biogenic emissions (biogenic CH4, biogenic CO2)\n- Land management removals and technological removals \n- Biogenic Product CO2 uptake\n"
                    x-unit: kgCO2e/declared unit
                    x-comment: "PCF (Incl. biogenic CO2 uptake) = \n  fossilGhgEmissions + \n  landUseChangeGhgEmissions + \n  landManagementBiogenicCO2Emissions + \n  landManagementBiogenicCO2Removals + \n  technologicalCO2Removals + \n  ccsTechnologicalCO2Capture\n  biogenicNonCO2Emissions + \n  biogenicCO2Uptake\n"
                    x-rule: SHALL
                    x-term: PCF Including biogenic CO2 uptake
                    x-methodology: 3.3.1
                    $ref: '#/components/schemas/Decimal'
                    example: "-14.22"
                fossilCarbonContent:
                    description: "The fossil carbon content of the product (mass of carbon). \n"
                    x-unit: kgC/declared unit
                    x-rule: SHALL
                    x-term: Fossil carbon content
                    x-methodology: 3.3.2.4
                    $ref: '#/components/schemas/PositiveOrZeroDecimal'
                biogenicCarbonContent:
                    description: "The biogenic carbon content of the product (mass of carbon). \n"
                    x-unit: kgC/declared unit
                    x-rule: BIO
                    x-term: Biogenic carbon content
                    x-methodology: 3.3.2.4
                    $ref: '#/components/schemas/PositiveOrZeroDecimal'
                recycledCarbonContent:
                    description: |
                        The carbon content (both biogenic and fossil) from recycled material in the product (mass of carbon).
                    $ref: '#/components/schemas/PositiveOrZeroDecimal'
                    x-unit: kgC/declared unit
                    x-rule: SHOULD
                    x-term: Recycled carbon content
                    x-methodology: 3.3.2.2
                fossilGhgEmissions:
                    description: "The emissions from fossil sources as a result of fuel combustion, from \nfugitive emissions, and from process emissions. \n\nExpressed in kgCO2e per declared unit. \n"
                    summary: "The emissions from fossil sources as a result of fuel combustion, from fugitive \nemissions, and from process emissions. \n"
                    x-unit: kgCO2e/declared unit
                    x-rule: SHALL
                    x-term: Fossil emissions
                    x-methodology: 3.3.2.4
                    $ref: '#/components/schemas/PositiveOrZeroDecimal'
                landUseChangeGhgEmissions:
                    description: "GHG emissions from land-use change, such as deforestation or conversion\nfrom natural forest to plantation forest, that cause carbon stock loss. \n"
                    x-unit: kgCO2e/declared unit
                    x-rule: BIO
                    x-term: Land use and land use change emissions or LUC emissions
                    x-comment: Replaces dLucGhgEmissions
                    x-methodology: 3.3.2.4
                    $ref: '#/components/schemas/PositiveOrZeroDecimal'
                landCarbonLeakage:
                    description: "Placeholder for indirect land use change causing displacement of food production, outside of value-chain \n"
                    x-unit: kgCO2e/declared unit
                    x-comment: Placeholder.
                    $ref: '#/components/schemas/PositiveOrZeroDecimal'
                landManagementFossilGhgEmissions:
                    description: "Fossil CO2, N2O, fossil CH4, HFCs and PFCs emissions due to land \nmanagement practices. \n\nNote: `fossilGhgEmissions` already includes these emissions.\n"
                    x-unit: kgCO2e/declared unit
                    x-rule: BIO-2027
                    x-term: Fossil emissions - land management
                    x-methodology: 3.3.2.4
                    $ref: '#/components/schemas/PositiveOrZeroDecimal'
                landManagementBiogenicCO2Emissions:
                    description: "Biogenic CO2 emissions occurring due to recurring land management actions on \nland within the same land-use category.\n"
                    x-unit: kgCO2e/declared unit
                    x-rule: BIO-2027
                    x-term: Land management CO2 emissions
                    x-methodology: 3.3.2.4
                    $ref: '#/components/schemas/PositiveOrZeroDecimal'
                landManagementBiogenicCO2Removals:
                    description: "Biogenic CO2 removals resulting from a net increase in carbon stored in land-based carbon \npools (e.g. reforestation and afforestation). Subject to traceability requirements.\n"
                    x-unit: kgCO2e/declared unit
                    x-term: Land management CO2 removals
                    x-methodology: 3.3.2.4
                    $ref: '#/components/schemas/NegativeOrZeroDecimal'
                biogenicCO2Uptake:
                    description: |
                        Temporary CO2 uptake of biomass in the product at point of leaving factory gate.
                    x-unit: kgCO2e/declared unit
                    x-rule: BIO
                    x-term: Biogenic CO2 uptake
                    x-methodology: 3.3.2.4
                    $ref: '#/components/schemas/NegativeOrZeroDecimal'
                    x-comment: Replaces biogenicCarbonWithdrawal
                biogenicNonCO2Emissions:
                    description: |
                        CH4 emissions from land management practices and  the oxidation and transformation or degradation of biomass.
                    x-unit: kgCO2e/declared unit
                    x-rule: BIO
                    x-term: Biogenic non-CO2 emissions
                    x-methodology: 3.3.2.4
                    $ref: '#/components/schemas/PositiveOrZeroDecimal'
                landAreaOccupation:
                    description: |
                        The amount of agricultural land occupied in the reporting year to produce the product.
                    x-unit: (m2/year) / declared unit
                    $ref: '#/components/schemas/PositiveOrZeroDecimal'
                    x-term: Land occupation
                    x-methodology: 3.3.2.4
                aircraftGhgEmissions:
                    description: "If present, the GHG emissions resulting from aircraft engine usage \nfor the transport of the product, excluding radiative forcing.\n\nThe aircraft emissions are excluding biogenic CO2 uptake.      \n"
                    x-unit: kgCO2e/declared unit
                    x-term: Aircraft emissions
                    x-methodology: 3.3.2.1
                    $ref: '#/components/schemas/PositiveOrZeroDecimal'
                packagingEmissionsIncluded:
                    description: "Indicates whether packaging emissions are included in the scope \nand boundary of the product carbon footprint. \n\nIf `true`, packaging emissions are included in the product carbon \nfootprint, and the `packagingGhgEmissions` property SHOULD be defined.\n\nIf `false`, packaging emissions are not included in the product carbon \nfootprint, and the `packagingGhgEmissions` property MUST be undefined.\n"
                    type: boolean
                    x-rule: SHALL
                    x-term: Packaging emissions
                    x-methodology: 3.3.1.1
                packagingGhgEmissions:
                    description: "Emissions resulting from the packaging of the product. \nSHOULD be defined if `packagingEmissionsIncluded` is true and MUST be \nundefined if `packagingEmissionsIncluded` is false.\n\nPackaging emissions are excluding biogenic CO2 uptake.\n"
                    $ref: '#/components/schemas/PositiveOrZeroDecimal'
                    x-rule: SHOULD
                    x-unit: kgCO2e/declared unit
                    x-term: Packaging emissions
                    x-methodology: 3.3.1.1
                packagingBiogenicCarbonContent:
                    description: |
                        The biogenic carbon content of the packaging (mass of carbon).
                    $ref: '#/components/schemas/PositiveOrZeroDecimal'
                    x-unit: kgC/declared unit
                    x-term: Packaging biogenic carbon content
                    x-methodology: 3.3.1.1
                outboundLogisticsGhgEmissions:
                    description: "Emissions resulting from outbound logistics should be calculated and reported \nseparately up to the point where another company (e.g., customer) \ntakes over responsibility for the product (i.e. own or pay for the outbound\nlogistics). MUST be undefined if  the company calculating and exchanging the \nPCF is not responsible for the outbound logistics. \n\nThe outbound logistics emissions are excluding biogenic CO2 uptake.\n"
                    $ref: '#/components/schemas/PositiveOrZeroDecimal'
                    x-rule: SHOULD
                    x-unit: kgCO2e/declared unit
                    x-term: Outbound logistics emissions
                    x-methodology: 3.3.2.1
                ccsTechnologicalCO2CaptureIncluded:
                    description: "Indicates whether CCS (including BECCS) take place within the scope and boundary of the product carbon footprint. \n\nIf `true`, `ccsTechnologicalCO2Capture`, `technologicalCO2Removals` and `technologicalCO2CaptureOrigin` shall be defined if known and available.\n\nIf `false`, `ccsTechnologicalCO2Capture`, `technologicalCO2Removals` and `technologicalCO2CaptureOrigin` shall be undefined.\n"
                    type: boolean
                    x-term: Technological CO2 capture with geological storage
                    x-rule: SHALL
                    x-methodology: 3.3.2.5
                    example: false
                ccsTechnologicalCO2Capture:
                    description: |
                        The amount of CO2 captured with Carbon Capture and Storage (CCS) technologies.
                    $ref: '#/components/schemas/NegativeOrZeroDecimal'
                    x-unit: kgCO2e/declared unit
                    x-term: Technological CO2 capture with geological storage
                    x-rule: CCS
                    x-methodology: 3.3.2.5
                    example: "-4.34"
                technologicalCO2CaptureOrigin:
                    description: "For CCU: Information about the origin (fossil or biogenic) and path of the captured CO2 used in CCU, including \nthe name and location of the capture facility. This information enhances transparency and traceability, \nenabling tracking of CO2 across the value chain.\n\nFor CCS: Traceability data, i.e. information on location injection site, geological reservoir as part of the overall \ntechnological CO2 capture origin data point for the PCF.\n"
                    type: string
                    x-term: Technological CO2 capture origin
                    x-rule: CCU,CCS
                    x-methodology: 3.3.2.5
                    x-go-type-skip-optional-pointer: true
                technologicalCO2Removals:
                    description: |
                        CO2 removed directly from the atmosphere or via biogenic CO2 capture. Subject to reporting requirements.
                    x-unit: kgCO2e/declared unit
                    x-rule: CCS
                    x-term: Technological CO2 removals
                    x-methodology: 3.3.2.5
                    $ref: '#/components/schemas/PositiveOrZeroDecimal'
                ccuCarbonContent:
                    description: |
                        The amount of captured carbon (both biogenic and fossil) during CCU (Carbon Capture & Usage) in the product.
                    $ref: '#/components/schemas/PositiveOrZeroDecimal'
                    x-unit: kgC/declared unit
                    x-term: CCU carbon content
                    x-rule: CCU
                    x-methodology: 3.3.2.5
                ccuCalculationApproach:
                    description: |
                        The calculation approach for CCU: "Cut-off" or "Credit."
                    type: string
                    enum:
                        - Cut-off
                        - Credit
                    x-term: CCU calculation approach
                    x-methodology: 3.3.2.5
                    x-rule: CCU
                    x-go-type-skip-optional-pointer: true
                ccuCreditCertification:
                    description: "(Only for Credit Approach) a URL to documentation verifying the certification from an external bookkeeping scheme. \nThis attribute ensures reliability and avoids double counting of credits within the crediting system.\n"
                    $ref: '#/components/schemas/Uri'
                    x-term: CCU credit certification
                    x-methodology: 3.3.2.5
                    x-rule: CCU
                ipccCharacterizationFactors:
                    description: |
                        The characterization factors from one or more IPCC Assessment Reports used in the calculation of the PCF.
                        It MUST be a non-empty set of strings with the format `AR$VERSION$`, where `$VERSION$` stands for the
                        IPCC report version number and MUST be an integer.

                        Per the Methodology the latest available characterization factor version shall be used, i.e., `["AR6"]`. In the event this is not possible, include the set of all characterization factors used.
                    note: supersedes `characterizationFactors` deprecated in 2.3.
                    summary: "The IPCC (Intergovernmental Panel of Climate Change) frequently releases (GWP) \nglobal warming potential values for climate gases related to CO2. These GWP \nvalues are released in Assessment Reports (AR), which are numbered. \n\nThe AR number can be used to track the age and accuracy of the GWP values used\nin reporting. This field indicates the IPCC version of the GWP characterization \nfactors used in the calculation of the PCF.\n\nPer the PACT Methodology, the latest available characterization factor version \nshall be used, i.e., [\"\"AR6\"\"]. In the event this is not possible, include the \nset of all characterization factors used.\n"
                    type: array
                    items:
                        type: string
                        pattern: '^AR\d+$'
                        x-go-type-skip-optional-pointer: true
                    minItems: 1
                    uniqueItems: true
                    examples:
                        - ["AR6"]
                        - ["AR5", "AR6"]
                    x-term: Characterization factors
                    x-methodology: 3.2.2
                    x-go-type-skip-optional-pointer: true
                crossSectoralStandards:
                    description: |
                        The cross-sectoral standards applied for calculating or allocating [=GHG=] emissions.

                        It MUST be a non-empty array and SHOULD contain only the following values without duplicates:

                          : `ISO14067`
                          :: for the ISO 14067 Standard, "Greenhouse gases — Carbon footprint of products — Requirements and guidelines for quantification"
                          : `ISO14083`
                          :: for the ISO 14083 Standard, "Greenhouse gases — Quantification and reporting of greenhouse gas emissions arising from transport chain operations"
                          : `ISO14040-44`
                          :: for the ISO 14040-44 Standard, "Environmental management — Life cycle assessment — Principles and framework"
                          : `GHGP-Product`
                          :: for the Greehouse Gas Protocol (GHGP) Product Standard
                          : `PEF`
                          :: for the EU Product Environmental Footprint Guide
                          : `PACT-1.0`
                          : `PACT-2.0`
                          : `PACT-3.0`
                          :: for a given version of the [=PACT Methodology=]. It is recommended to use the latest version of the Methodology.
                          : `PAS2050`
                          :: for the Publicly Available Specification (PAS) 2050, "Specification for the assessment of the life cycle greenhouse gas emissions of goods and services". The use of this standard is permitted but not recommended.

                        The enumeration of standards above CAN evolve in future revisions. A host system MUST accept ProductFootprints from later revisions with `crossSectoralStandards` containing values that are not defined in this specification.
                    note: Supersedes `crossSectoralStandardsUsed` deprecated in version 2.3.
                    summary: "The cross-sectoral standards applied for calculating or allocating GHG \nemissions. If multiple apply, list all.\n"
                    type: array
                    items:
                        type: string
                        x-enum:
                            - ISO14067
                            - ISO14083
                            - ISO14040-44
                            - GHGP-Product
                            - PEF
                            - PACT-1.0
                            - PACT-2.0
                            - PACT-3.0
                            - PAS2050
                            - "..."
                        x-go-type-skip-optional-pointer: true
                    minItems: 1
                    uniqueItems: true
                    x-term: Cross-sectoral standards
                    x-methodology: 3.1.2
                    examples:
                        - [ISO14067, PACT-3.0]
                    x-go-type-skip-optional-pointer: true
                productOrSectorSpecificRules:
                    description: |
                        The product-specific or sector-specific rules applied for calculating or allocating GHG emissions. If no product or sector specific rules were followed, this set MUST be empty.
                    summary: "The product-specific or sector-specific rules applied for calculating or \nallocating GHG emissions. Sector specific guidance frameworks, such as \nProduct Category Rules (PCR), are sets of rules for how to calculate and \ndocument Life Cycle Assessments. They provide product category specific\nguidance and enhance comparability between assessments of the different \nsuppliers for the same category (sector). The same applies to Product \nEnvironmental Footprint Category Rules (PEFCR)).  If no rules were used, \nleave this field empty.\n"
                    type: array
                    items:
                        $ref: '#/components/schemas/ProductOrSectorSpecificRule'
                    minItems: 1
                    uniqueItems: true
                    x-term: Product or sector specific rules
                    x-methodology: 3.1.2
                    note: Multiple ProductOrSpecificRules can be specifed, each with its own operator and ruleNames.
                    examples:
                        - - operator: PEF
                            ruleNames:
                                - "PEF 1.0"
                                - "PEF 2.0"
                          - operator: PCR
                            ruleNames:
                                - "PCR-A"
                    x-go-type-skip-optional-pointer: true
                exemptedEmissionsPercent:
                    description: "The percentage of emissions excluded from the PCF. \n"
                    note: string<decimal> in 3.0, was Number in 2.x. Removed upper boundary of 5%.
                    x-term: Exemption rules
                    x-methodology: 3.3.1.2
                    $ref: '#/components/schemas/Decimal'
                    examples:
                        - "5.3"
                        - "10.4"
                exemptedEmissionsDescription:
                    description: |
                        Rationale behind exclusion of specific PCF emissions, CAN be the empty string if no emissions were excluded.
                    summary: |
                        If emissions exempted, rationale behind exclusion of specific PCF emissions.
                    x-term: Exemption rules
                    x-methodology: 3.3.1.2
                    note: optional in 3.0, was mandatory in 2.x
                    type: string
                    x-go-type-skip-optional-pointer: true
                allocationRulesDescription:
                    description: "Description of the allocation rules applied to the PCFs foreground data \nincluding an explanation of the underlying reasons (way of allocating \nall activities from manufacturing steps to the declared unit).\n"
                    type: string
                    x-rule: SHOULD
                    x-term: Allocation rules
                    x-methodology: 3.3.1.3
                    x-go-type-skip-optional-pointer: true
                secondaryEmissionFactorSources:
                    description: |
                        If secondary data was used to calculate the <{CarbonFootprint}>, then it MUST include the property <{CarbonFootprint/secondaryEmissionFactorSources}> with value the emission factors used for the <{CarbonFootprint}> calculation.

                        If no secondary data is used, this property MUST BE undefined.
                    summary: "The list of secondary data sources and versions which have been used by \nthe data owner for the PCF calculation (e.g. databases such as ecoinvent)\n\nIf no secondary data is used, this property MUST BE undefined.\n"
                    x-term: Secondary emission factors sources
                    x-methodology: 3.2.3
                    x-rule: SHOULD
                    type: array
                    minItems: 1
                    items:
                        $ref: '#/components/schemas/EmissionFactorSource'
                    examples:
                        - - name: ecoinvent
                            version: "3.7"
                    x-go-type-skip-optional-pointer: true
                primaryDataShare:
                    description: |
                        Share of primary data in the final absolute PCF value excluding biogenic CO2 uptake (pcfExcludingBiogenicUptake).
                    note: string<decimal> in 3.0, was Number in 2.x
                    x-rule: SHALL
                    x-term: Primary Data Share
                    x-methodology: 4.2.2
                    $ref: '#/components/schemas/Decimal'
                dqi:
                    description: |
                        Data Quality Indicators (dqi) in accordance with the PACT Methodology.
                    x-rule: SHALL-2027
                    x-term: Data Quality Indicators
                    x-methodology: 4.2.3
                    $ref: '#/components/schemas/DataQualityIndicators'
                verification:
                    description: |
                        The presence of the <{Verification}> object indicates whether or not the <{CarbonFootprint}> has
                        been verified in line with [=PACT Methodology=] requirements.
                    x-term: Verification information
                    x-rule: MAY
                    $ref: '#/components/schemas/Verification'
        DataModelExtension:
            title: DataModelExtension
            description: |
                Each data model extension MUST be a valid JSON object conforming with the
                [JSON Representation of a Data Model Extension](https://wbcsd.github.io/data-model-extensions/spec/#instantiation).

                See [[!DATA-MODEL-EXTENSIONS]] for technical details and [[!EXTENSIONS-GUIDANCE]] for data model extension guidance.
            example: |
                Example imaginary Data Model Extension for encoding shipment-related data, encoded in JSON:
                ```json
                {
                  "specVersion": "2.0.0",
                  "dataSchema": "https://reg.carbon-transparency.org/shipment/1.0.0/data-model.json",
                  "data": {
                    "shipmentId": "S1234567890",
                    "consignmentId": "Cabc.def-ghi",
                    "shipmentType": "PICKUP",
                    "weight": 10,
                    "transportChainElementId": "ABCDEFGHI"
                  }
                }
                ```
            type: object
            required:
                - specVersion
                - dataSchema
                - data
            properties:
                specversion:
                    type: string
                    description: "The version of the Data Model Extension specification. The value \nMUST be a string in the format major.minor.patch as defined in \nSemantic Versioning 2.0.0.\n"
                    x-go-type-skip-optional-pointer: true
                dataSchema:
                    type: string
                    format: uri
                    description: |
                        The value MUST be the URL to the publicly accessible Extension Schema File
                    x-go-type-skip-optional-pointer: true
                documentation:
                    type: string
                    format: uri
                    description: |
                        The value MUST be the URL to the publicly accessible Extension Documentation.
                    x-go-type-skip-optional-pointer: true
                data:
                    type: object
                    description: "The value MUST be a JSON Object that conforms to the extension schema file \nreferenced by the dataSchema property.\n"
        ProductOrSectorSpecificRule:
            title: ProductOrSectorSpecificRule
            description: |
                A ProductOrSectorSpecificRule refers to a set of product or sector specific rules published by a specific operator and applied during product carbon footprint calculation.
            type: object
            required:
                - operator
                - ruleNames
            properties:
                operator:
                    description: "Selection of operator of PCR being used for the PCF calculation. If \noperator is not available in the given list, or if a sector specific \nguidance has been followed, please set \"Other\" and include details \nunder \"otherOperatorName\".\n"
                    type: string
                    enum:
                        - PEF
                        - EPD International
                        - Other
                    examples:
                        - PEF
                        - Other
                    x-go-type-skip-optional-pointer: true
                ruleNames:
                    description: "Names of the product or sector specific rules being used for the PCF \ncalculation.\n"
                    type: array
                    items:
                        type: string
                        minLength: 1
                        x-go-type-skip-optional-pointer: true
                    minItems: 1
                    uniqueItems: true
                    examples:
                        - [PEF 1.0, PEF 2.0]
                    x-go-type-skip-optional-pointer: true
                otherOperatorName:
                    description: "If operator is Other, then this attribute must be populated with the name \nof the operator.\n"
                    type: string
                    minLength: 1
                    x-go-type-skip-optional-pointer: true
            example: |
                ```json
                {
                  "operator": "PEF",
                  "ruleNames": [
                    "PEF 1.0",
                    "Other"
                  ]
                }
                ```
        EmissionFactorSource:
            title: EmissionFactorSource
            description: "References emission factor databases, see [=PACT Methodology=] Section 4.1.3.2.\n\n```json\n{\n  \"name\": \"ecoinvent\",\n  \"version\": \"3.9.1\"\n}\n```      \n"
            type: object
            required:
                - name
                - version
            properties:
                name:
                    description: |
                        Name of the secondary emission factor database
                    $ref: '#/components/schemas/NonEmptyString'
                    examples:
                        - ecoinvent
                version:
                    description: |
                        Version of the secondary emission factor database
                    $ref: '#/components/schemas/NonEmptyString'
                    examples:
                        - 3.9.1
        DataQualityIndicators:
            title: DataQualityIndicators
            description: "Data type DataQualityIndicators contains the quantitative data quality indicators.  \n"
            example: "Example value for the case that all DQIs are known but no coverage after exemption assessment performed:\n\n```json\n{\n  \"technologicalDQR\": \"5.0\",\n  \"geographicalDQR\": \"2.0\"\n  \"temporalDQR\": \"3.0\",\n}\n```        \n"
            type: object
            x-methodology: 4.2.3
            required:
                - technologicalDQR
                - geographicalDQR
                - temporalDQR
            properties:
                technologicalDQR:
                    description: "Quantitative data quality rating (DQR) based on the data quality matrix,\nscoring the technological representativeness of the sources used for\nthe final absolute PCF excluding biogenic CO2 uptake calculation based \non weighted average of all inputs.\n\nThe value MUST be between `1` and `5` inclusive.\n"
                    note: string<decimal> in 3.0, was Number in 2.x
                    x-term: Technological representativeness
                    x-rule: SHALL
                    $ref: '#/components/schemas/Decimal'
                geographicalDQR:
                    description: "Quantitative data quality rating (DQR) based on the data quality matrix,\nscoring the geographical representativeness of the sources used for \nthe final absolute PCF excluding biogenic CO2 uptake calculation based on\nweighted average of all inputs.\n\nThe value MUST be between `1` and `5` inclusive.\n"
                    note: string<decimal> in 3.0, was Number in 2.x
                    x-term: Geographical representativenes
                    x-rule: SHALL
                    $ref: '#/components/schemas/Decimal'
                temporalDQR:
                    description: "Quantitative data quality rating (DQR) based on the data quality matrix,\nscoring the temporal representativeness of the sources used for \nthe final absolute PCF excluding biogenic CO2 uptake calculation based on\nweighted average of all inputs.\n\nThe value MUST be between `1` and `5` inclusive.\n"
                    note: string<decimal> in 3.0, was Number in 2.x
                    x-term: Temporal / Time representativenes
                    x-rule: SHALL
                    $ref: '#/components/schemas/Decimal'
        Verification:
            title: Verification
            description: |
                Contains the verification in conformance with the PACT Methodology.
            note: Renamed from `Assurance` in 3.0
            example: "```json \n{\n  \"coverage\": \"PCF program\",\n  \"providerName\": \"My Auditor\",\n  \"completedAt\": \"2025-04-08T14:47:32Z\"\n  \"standardName\": \"ISO 14044\"\n}\n```\n"
            type: object
            properties:
                coverage:
                    description: |
                        The coverage of the verification defines the type and level of GHG data to be verified.
                    type: string
                    note: values changed from v2.x
                    enum:
                        - PCF calculation model
                        - PCF program
                        - product level
                    x-term: Coverage
                    x-methodology: 5.3.3
                    x-go-type-skip-optional-pointer: true
                providerName:
                    description: |
                        The non-empty name of the independent third party engaged to undertake the verification.
                    note: optional in version 3.0 was mandatory in 2.x
                    type: string
                    x-term: Verification provider
                    x-methodology: 5.3.7
                    x-go-type-skip-optional-pointer: true
                completedAt:
                    description: |
                        The date at which the verification was completed
                    type: string
                    format: date-time
                    x-go-type-skip-optional-pointer: true
                standardName:
                    description: |
                        Name of the standard against which the PCF was assured
                    type: string
                    x-go-type-skip-optional-pointer: true
                comments:
                    description: |
                        Any additional comments that will clarify the interpretation of the verification.
                    type: string
                    x-go-type-skip-optional-pointer: true
        # -----------
        # Simple types
        NonEmptyString:
            type: string
            minLength: 1
            x-go-type-skip-optional-pointer: true
        Urn:
            type: string
            format: urn
            pattern: '^([uU][rR][nN]):'
            x-go-type-skip-optional-pointer: true
        Uri:
            type: string
            format: uri
            x-go-type-skip-optional-pointer: true
        Decimal:
            type: string
            format: decimal
            pattern: ^[+-]?\d+(\.\d+)?$
            x-go-type-skip-optional-pointer: true
        PositiveNonZeroDecimal:
            type: string
            format: decimal
            pattern: ^[+]?(\d*[1-9]\d*)(\.\d+)?|(0+\.\d*[1-9]\d*)$
            comment: '> 0'
            x-go-type-skip-optional-pointer: true
        PositiveOrZeroDecimal:
            type: string
            format: decimal
            pattern: ^[+]?\d+(\.\d+)?$
            comment: '>= 0'
            x-go-type-skip-optional-pointer: true
        NegativeOrZeroDecimal:
            type: string
            format: decimal
            pattern: ^(-\d+(\.\d+)?)|0+(\.0+)?$
            comment: '<= 0'
            x-go-type-skip-optional-pointer: true
        NegativeNonZeroDecimal:
            type: string
            format: decimal
            pattern: ^-((\d*[1-9]\d*)(\.\d+)?|(0+\.\d*[1-9]\d*))$
            comment: '< 0'
            x-go-type-skip-optional-pointer: true
        # -----------
        # Events
        BaseEvent:
            description: |
                Base class for all events, it follows the CloudEvents specification.
            type: object
            required:
                - type
                - specversion
                - id
                - source
                - time
                - data
            properties:
                type:
                    type: string
                    description: Event type identifier.
                    x-go-type-skip-optional-pointer: true
                specversion:
                    type: string
                    description: CloudEvents version.
                    x-go-type-skip-optional-pointer: true
                id:
                    type: string
                    description: Event identifier. Must be able to uniquely identify the event by source and id.
                    x-go-type-skip-optional-pointer: true
                source:
                    type: string
                    description: The domain and endpoint of the application from which the event originates.
                    x-go-type-skip-optional-pointer: true
                time:
                    type: string
                    format: date-time
                    description: The time the event occurred.
                    x-go-type-skip-optional-pointer: true
                data:
                    type: object
                    description: The event payload.
        PublishedEvent:
            $ref: '#/components/schemas/BaseEvent'
            title: Published Event
            description: "Notification that a ProductFootprint has been published (either new or updated).\nThis event is triggered by the [=data owner=] and send to relevant [=data recipients=].\n\nIf the [=data recipient=] cannot be reached by the [=data owner=], the data owner \nSHOULD retry to send the event at a later time, using an exponential backoff\nstrategy. It SHOULD abandon sending the event after 72 hours. \n\nThe data object of the `PublishedEvent` contains the list of Product Footprint \n*IDs* that have been published or updated by the data owner.\n\nThe data recipient can retrieve the *actual* Product Footprints by calling the \n[=Action GetFootprint=] action on the data owner's systems.\n"
            type: object
            examples:
                - |
                  ```http
                  POST /3/events HTTP/1.1
                  Host: api.example.com
                  Content-Type: application/cloudevents+json
                  Authorizaton: Bearer xxxxxxxxxxxxx

                  {
                    "type": "org.wbcsd.pact.ProductFootprint.PublishedEvent.3",
                    "specversion": "1.0",
                    "id": "1934405d-4f9b-4b3b-9c05bc35-68f8",
                    "source": "//api.example.com/3/events",
                    "time": "2022-05-31T17:31:00Z",
                    "data": {
                      "pfIds": ["079e425a-464f-528d-341d-4a944a1dfd70"]
                    }
                  }
                  ```
            properties:
                $ref: '#/components/schemas/BaseEvent/properties'
                type:
                    type: string
                    const: org.wbcsd.pact.ProductFootprint.PublishedEvent.3
                    description: Event type identifier.
                    x-go-type-skip-optional-pointer: true
                data:
                    type: object
                    description: "Object containing the list of Product Footprint Ids that have been published or updated by the data owner.\n\n```\n\"data\": { \n  \"pfIds\": [ \"uuid1\", \"uuid2\", ... ] \n}\n```\n"
                    properties:
                        pfIds:
                            type: array
                            description: The list of Product Footprint Ids that have been published or updated by the data owner.
                            items:
                                type: string
                                x-go-type-skip-optional-pointer: true
                            x-go-type-skip-optional-pointer: true
        RequestCreatedEvent:
            $ref: '#/components/schemas/BaseEvent'
            title: Request Created Event
            description: "A data recipient requests a ProductFootprint from the data owner. The data recipient\nMUST provide the criteria in the data object to enable the data owner to either\nfind an existing relevant PCF or create a new one.\n\nCriteria to provide can be product id, geography, company identifier, validity \nperiod, etc, see below for details.\nFor filtering logic, see [[#filtering]].\n\nIf the data owner can *immediately* determine that it will not be able to \nhandle this request it MUST respond with an appropriate `4xx` error response, \notherwise it MUST respond with a `200` (Success), indicating it will\nbe able to process the request asynchronously.\n\nOnly in the latter case (after having accepted the request for processing) the data \nowner MUST send a follow-up event back to the data recipient at some time in the future. \nThis follow up event MUST be either a `RequestFulfilledEvent` or `RequestRejectedEvent`. \n"
            examples:
                - "```http\nPOST /3/events HTTP/1.1\nHost: api.example.com\nContent-Type: application/cloudevents+json\nAuthorizaton: Bearer xxxxxxxxxxxxx\n\n{\n  \"type\": \"org.wbcsd.pact.ProductFootprint.RequestCreatedEvent.3\",\n  \"specversion\": \"1.0\",\n  \"id\": \"1934405d-4f9b-4b3b-9c05bc35-68f8\",\n  \"source\": \"//api.example.com/3/events\",\n  \"time\": \"2025-03-05T17:31:00Z\",\n  \"data\": {  \n    \"productId\": [\"urn:pact:sample.com:product-id:44055-9c05bc35-68f8\"],\n    \"geography\": [\"DE\"],\n    \"validAfter\": \"2025-01-01T00:00:00Z\"\n  }\n}\n```\n"
            type: object
            properties:
                $ref: '#/components/schemas/BaseEvent/properties'
                type:
                    type: string
                    const: org.wbcsd.pact.ProductFootprint.RequestCreatedEvent.3
                    description: Event type identifier.
                    x-go-type-skip-optional-pointer: true
                data:
                    $ref: '#/components/schemas/RequestCreatedEventData'
        RequestFulfilledEvent:
            $ref: '#/components/schemas/BaseEvent'
            title: Request Fulfilled Event
            description: "Notification that the request for PCF(s) has been fulfilled by the data owner. \nThis notification will be sent by the data owner back to the data recipient in \nresponse to a ProductFootprintRequest.Created event, see [[#request-created-event]].\n\nThe data object contains the original requestEventId and the resulting list of \nProductFootprints which conform to the set of criteria specified by the data \nrecipient in the preceding RequestCreated event. This list MUST be non-empty, \nas the RequestFulfilled event indicates success. The data owner MUST send \na single RequestFulfilled event back to the data recipient per corresponding \nRequestCreated event.\n\nIf there are no product footprints to return, the data owner MUST send a\n[[#request-rejected-event]] instead.\n\nIf the [=data recipient=] cannot be reached by the [=data owner=], the data owner \nSHOULD retry to send the event at a later time, using an exponential backoff\nstrategy. It SHOULD abandon sending the event after 72 hours. \n"
            type: object
            examples:
                - "```http\nPOST /3/events HTTP/1.1\nHost: api.example.com\nContent-Type: application/cloudevents+json\nAuthorizaton: Bearer xxxxxxxxxxxxx\n\n{\n  \"type\": \"org.wbcsd.pact.ProductFootprint.RequestFulfilledEvent.3\",\n  \"specversion\": \"1.0\",\n  \"id\": \"505e5d-4f9b-4b3b-9c05bc35-68f8\",\n  \"source\": \"//api.example.com/3/events\",\n  \"time\": \"2025-03-05T17:31:00Z\",\n  \"data\": {  \n    \"requestEventId\": \"1934405d-4f9b-4b3b-9c05bc35-68f8\",\n    \"pfs\": [\n      { \n        /* ProductFootprint object */\n        \"id\": \"079e425a-464f-528d-341d-4a944a1dfd70\",\n        \"specVersion\": \"3.0\",\n        \"productIds\": [\"urn:pact:sample.com:product-id:44055-9c05bc35-68f8\"], \n        ...\n        \"pcf\": {\n          ...\n        }\n      }, \n      { \n        \"id\": \"079e425a-464f-528d-341d-4a944a1dfd71\",\n        ...\n      }\n    ]\n  }\n}\n```\n"
            properties:
                $ref: '#/components/schemas/BaseEvent/properties'
                type:
                    type: string
                    const: org.wbcsd.pact.ProductFootprint.RequestFulfilledEvent.3
                    description: Event type identifier.
                    x-go-type-skip-optional-pointer: true
                data:
                    type: object
                    description: data object
                    required:
                        - requestEventId
                        - pfs
                    properties:
                        requestEventId:
                            description: The ID of the request event that has been fulfilled.
                            type: string
                            x-go-type-skip-optional-pointer: true
                        pfs:
                            description: "The list of ProductFootprints resulting from the original \nthat have been returned. This list MUST be non-empty.\n"
                            type: array
                            minItems: 1
                            items:
                                $ref: '#/components/schemas/ProductFootprint'
                            x-go-type-skip-optional-pointer: true
        RequestRejectedEvent:
            $ref: '#/components/schemas/BaseEvent'
            title: Request Rejected Event
            description: "Notification that a request for a ProductFootprint can not be fulfilled.\nThe RequestRejectedEvent is an event sent back from the data owner to \nthe data recipient upon NOT successfully fulfilling the preceding \nRequestCreatedEvent sent by the data recipient.\n\nIf the [=data recipient=] cannot be reached by the [=data owner=], the data owner \nSHOULD retry to send the event at a later time, using an exponential backoff\nstrategy. It SHOULD abandon sending the event after 72 hours. \n"
            examples:
                - "```http\nPOST /3/events HTTP/1.1\nHost: api.example.com\nContent-Type: application/cloudevents+json\nAuthorizaton: Bearer xxxxxxxxxxxxx\n\n{\n  \"type\": \"org.wbcsd.pact.ProductFootprint.RequestRejectedEvent.3\",\n  \"specversion\": \"1.0\",\n  \"id\": \"505e5d-4f9b-4b3b-9c05bc35-68f8\",\n  \"source\": \"//api.example.com/3/events\",\n  \"time\": \"2025-03-05T17:31:00Z\",\n  \"data\": {  \n    \"requestEventId\": \"1934405d-4f9b-4b3b-9c05bc35-68f8\",\n    \"error\": {\n      \"code\": \"NotFound\",\n      \"message\": \"The requested footprint could not be found.\"\n    }\n  }\n}\n```\n"
            type: object
            properties:
                $ref: '#/components/schemas/BaseEvent/properties'
                type:
                    type: string
                    const: org.wbcsd.pact.ProductFootprint.RequestRejectedEvent.3
                    description: Event type identifier.
                    x-go-type-skip-optional-pointer: true
                data:
                    type: object
                    description: data object
                    required:
                        - requestEventId
                        - error
                    properties:
                        requestEventId:
                            description: The ID of the RequestCreateEvent that has been rejected.
                            type: string
                            x-go-type-skip-optional-pointer: true
                        error:
                            $ref: '#/components/schemas/Error'
        # ---------------
        # Error Responses
        Error:
            title: Error
            description: |-
                Object with error code and description, to be returned by the API methods in case of error.
                See [[#api-error-handling]] for details.
            type: object
            properties:
                code:
                    type: string
                    description: Error code identifier.
                    enum:
                        - BadRequest # 400
                        - AccessDenied # 403
                        - TokenExpired # 401
                        - NotFound # 404 NoSuchFootprint
                        - InternalError # 500
                        - NotImplemented #501
                    x-go-type-skip-optional-pointer: true
                message:
                    type: string
                    description: Human readable error message.
                    x-go-type-skip-optional-pointer: true
            required:
                - code
                - message
            example: "```json\n{ \n  \"code\": \"NotFound\",\n  \"message\": \"The requested footprint could not be found.\" \n}\n```\n"
        BadRequestResponse:
            description: |
                Bad request.

                Response body MUST contain a JSON <{Error}> object
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Error'
        NotFoundResponse:
            description: |
                Not found.

                Response body MUST contain a JSON <{Error}> object
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Error'
        UnauthorizedResponse: # 401
            description: "The request is not authorized, the access token is invalid or has expired. \n\nResponse body MUST contain a JSON <{Error}> object\n"
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Error'
        TokenExpiredResponse: # 401
            description: |
                Token expired.

                Response body MUST contain a JSON <{Error}> object
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Error'
        ForbiddenResponse:
            description: |
                Access Denied.

                Response body MUST contain a JSON <{Error}> object
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Error'
        NotImplementedResponse:
            description: |
                Not implemented.

                Response body MUST contain a JSON <{Error}> object
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Error'
        InternalErrorResponse:
            description: |
                Internal Error.

                Response body MUST contain a JSON <{Error}> object
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Error'
        RequestCreatedEventData:
            type: object
            description: |
                Criteria for filtering ProductFootprint requests.
            properties:
                productId:
                    description: >-
                        One or more product IDs. Will return all footprints which have a corresponding ID in their `productIds` attribute. The match must be-case insensitive. Note that a footprint itself can also have multiple product IDs.
                    type: array
                    items:
                        type: string
                        format: urn
                        pattern: '^([uU][rR][nN]):'
                        x-go-type-skip-optional-pointer: true
                    x-go-type-skip-optional-pointer: true
                companyId:
                    description: >-
                        One or more company IDs. Will return all footprints which have a corresponding ID in their `companyId` attribute. The match must be case-insensitive. Note that a footprint itself can also have multiple company IDs.
                    type: array
                    items:
                        type: string
                        format: urn
                        pattern: '^([uU][rR][nN]):'
                        x-go-type-skip-optional-pointer: true
                    x-go-type-skip-optional-pointer: true
                geography:
                    description: >-
                        One or more geographic specifiers. Values specified can denote `geographyRegion` or `geographyCountry` or `geographyCountrySubdivision`. Will return all footprints within the specified geography(s). The match must be-case insensitive.
                    type: array
                    items:
                        type: string
                        x-go-type-skip-optional-pointer: true
                    x-go-type-skip-optional-pointer: true
                classification:
                    description: >-
                        One or more product classifications. Will return all footprints with corresponding values in the `productClassifications` attribute. Note that a footprint itself can have multiple classifications. The match must be-case insensitive.
                    type: array
                    items:
                        type: string
                        format: urn
                        pattern: '^([uU][rR][nN]):'
                        x-go-type-skip-optional-pointer: true
                    x-go-type-skip-optional-pointer: true
                validOn:
                    description: >
                        If present, MUST match all PCFs which were valid on the date specified: start validity period <= validOn <= end validity period. See [[#validity-period]] for determining validity period.

                    type: string
                    format: date-time
                    x-go-type-skip-optional-pointer: true
                validAfter:
                    description: >
                        If present, MUST match PCFs with a validity period start > validAfter.

                        See [[#validity-period]] for determining validity period.

                    type: string
                    format: date-time
                    x-go-type-skip-optional-pointer: true
                validBefore:
                    description: >
                        If present, MUST match PCFs with a validity period end < validBefore

                        See [[#validity-period]] for determining validity period.

                    type: string
                    format: date-time
                    x-go-type-skip-optional-pointer: true
                status:
                    description: >
                        If present, MUST be "Active" or "Deprecated". If not specified, will return footprints regardless of status. The match must be-case insensitive.

                    type: string
                    enum:
                        - Active
                        - Deprecated
                    x-go-type-skip-optional-pointer: true
                comment:
                    description: |
                        Free text comment.
                    type: string
                    x-go-type-skip-optional-pointer: true
    parameters:
        productId:
            name: productId
            description: One or more product IDs. Will return all footprints which have a corresponding ID in their `productIds` attribute. The match must be-case insensitive. Note that a footprint itself can also have multiple product IDs.
            in: query
            explode: true
            schema:
                type: array
                items:
                    $ref: '#/components/schemas/Urn'
                x-go-type-skip-optional-pointer: true
        companyId:
            name: companyId
            description: One or more company IDs. Will return all footprints which have a corresponding ID in their `companyId` attribute. The match must be case-insensitive. Note that a footprint itself can also have multiple company IDs.
            in: query
            explode: true
            schema:
                type: array
                items:
                    $ref: '#/components/schemas/Urn'
                x-go-type-skip-optional-pointer: true
        geography:
            name: geography
            description: One or more geographic specifiers. Values specified can denote `geographyRegion` or `geographyCountry` or `geographyCountrySubdivision`. Will return all footprints within the specified geography(s). The match must be-case insensitive.
            in: query
            explode: true
            schema:
                type: array
                items:
                    type: string
                    x-go-type-skip-optional-pointer: true
                x-go-type-skip-optional-pointer: true
        classification:
            name: classification
            description: One or more product classifications. Will return all footprints with corresponding values in the `productClassifications` attribute. Note that a footprint itself can have multiple classifications. The match must be-case insensitive.
            in: query
            explode: true
            schema:
                type: array
                items:
                    $ref: '#/components/schemas/Urn'
                x-go-type-skip-optional-pointer: true
        validOn:
            name: validOn
            description: |
                If present, MUST match all PCFs which were valid on the date specified: start validity period <= validOn <= end validity period. See [[#validity-period]] for determining validity period.
            in: query
            schema:
                type: string
                format: date-time
                x-go-type-skip-optional-pointer: true
        validAfter:
            name: validAfter
            description: "If present, MUST match PCFs with a validity period start > validAfter. \nSee [[#validity-period]] for determining validity period. \n"
            in: query
            schema:
                type: string
                format: date-time
                x-go-type-skip-optional-pointer: true
        validBefore:
            name: validBefore
            description: "If present, MUST match PCFs with a validity period end < validBefore\nSee [[#validity-period]] for determining validity period. \n"
            in: query
            schema:
                type: string
                format: date-time
                x-go-type-skip-optional-pointer: true
        status:
            name: status
            description: "If present, MUST be \"Active\" or \"Deprecated\". If not specified, will return footprints regardless of status. The match must be-case insensitive. \n"
            in: query
            schema:
                type: string
                enum:
                    - Active
                    - Deprecated
                x-go-type-skip-optional-pointer: true
