// Package ileapv0 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.2-0.20250511160408-c8cf342fd5ea DO NOT EDIT.
package ileapv0

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for AssuranceBoundary.
const (
	AssuranceBoundaryCradleToGate AssuranceBoundary = "Cradle-to-Gate"
	AssuranceBoundaryGateToGate   AssuranceBoundary = "Gate-to-Gate"
)

// Defines values for AssuranceCoverage.
const (
	AssuranceCoverageCorporateLevel AssuranceCoverage = "corporate level"
	AssuranceCoveragePCFSystem      AssuranceCoverage = "PCF system"
	AssuranceCoverageProductLevel   AssuranceCoverage = "product level"
	AssuranceCoverageProductLine    AssuranceCoverage = "product line"
)

// Defines values for AssuranceLevel.
const (
	AssuranceLevelLimited    AssuranceLevel = "limited"
	AssuranceLevelReasonable AssuranceLevel = "reasonable"
)

// Defines values for BiogenicAccountingMethodology.
const (
	BiogenicAccountingMethodologyGHPG    BiogenicAccountingMethodology = "GHPG"
	BiogenicAccountingMethodologyISO     BiogenicAccountingMethodology = "ISO"
	BiogenicAccountingMethodologyPEF     BiogenicAccountingMethodology = "PEF"
	BiogenicAccountingMethodologyQuantis BiogenicAccountingMethodology = "Quantis"
)

// Defines values for CharacterizationFactors.
const (
	CharacterizationFactorsAR5 CharacterizationFactors = "AR5"
	CharacterizationFactorsAR6 CharacterizationFactors = "AR6"
)

// Defines values for CrossSectoralStandard.
const (
	CrossSectoralStandardGHGProtocolProductStandard CrossSectoralStandard = "GHG Protocol Product standard"
	CrossSectoralStandardISOStandard14044           CrossSectoralStandard = "ISO Standard 14044"
	CrossSectoralStandardISOStandard14067           CrossSectoralStandard = "ISO Standard 14067"
)

// Defines values for DeclaredUnit.
const (
	DeclaredUnitCubicMeter   DeclaredUnit = "cubic meter"
	DeclaredUnitKilogram     DeclaredUnit = "kilogram"
	DeclaredUnitKilowattHour DeclaredUnit = "kilowatt hour"
	DeclaredUnitLiter        DeclaredUnit = "liter"
	DeclaredUnitMegajoule    DeclaredUnit = "megajoule"
	DeclaredUnitSquareMeter  DeclaredUnit = "square meter"
	DeclaredUnitTonKilometer DeclaredUnit = "ton kilometer"
)

// Defines values for FeedstockType.
const (
	FeedstockTypeCookingOil           FeedstockType = "Cooking oil"
	FeedstockTypeFossil               FeedstockType = "Fossil"
	FeedstockTypeGrid                 FeedstockType = "Grid"
	FeedstockTypeNaturalGas           FeedstockType = "Natural gas"
	FeedstockTypeRenewableElectricity FeedstockType = "Renewable electricity"
)

// Defines values for PackagingOrTrEqType.
const (
	PackagingOrTrEqTypeBox       PackagingOrTrEqType = "Box"
	PackagingOrTrEqTypeContainer PackagingOrTrEqType = "Container"
	PackagingOrTrEqTypePallet    PackagingOrTrEqType = "Pallet"
)

// Defines values for PathfinderEvent0Type.
const (
	PathfinderEvent0TypeOrgWbcsdPathfinderProductFootprintPublishedV1 PathfinderEvent0Type = "org.wbcsd.pathfinder.ProductFootprint.Published.v1"
)

// Defines values for PathfinderEvent1Type.
const (
	PathfinderEvent1TypeOrgWbcsdPathfinderProductFootprintRequestCreatedV1 PathfinderEvent1Type = "org.wbcsd.pathfinder.ProductFootprintRequest.Created.v1"
)

// Defines values for PfStatus.
const (
	PfStatusActive     PfStatus = "Active"
	PfStatusDeprecated PfStatus = "Deprecated"
)

// Defines values for ProductOrSectorSpecificRuleOperator.
const (
	ProductOrSectorSpecificRuleOperatorEPDInternational ProductOrSectorSpecificRuleOperator = "EPD International"
	ProductOrSectorSpecificRuleOperatorOther            ProductOrSectorSpecificRuleOperator = "Other"
	ProductOrSectorSpecificRuleOperatorPEF              ProductOrSectorSpecificRuleOperator = "PEF"
)

// Defines values for TransportMode.
const (
	TransportModeAir            TransportMode = "Air"
	TransportModeInlandWaterway TransportMode = "InlandWaterway"
	TransportModeRail           TransportMode = "Rail"
	TransportModeRoad           TransportMode = "Road"
	TransportModeSea            TransportMode = "Sea"
)

// Defines values for UNRegionOrSubregion.
const (
	UNRegionOrSubregionAfrica                      UNRegionOrSubregion = "Africa"
	UNRegionOrSubregionAmericas                    UNRegionOrSubregion = "Americas"
	UNRegionOrSubregionAsia                        UNRegionOrSubregion = "Asia"
	UNRegionOrSubregionAustraliaAndNewZealand      UNRegionOrSubregion = "Australia and New Zealand"
	UNRegionOrSubregionCentralAsia                 UNRegionOrSubregion = "Central Asia"
	UNRegionOrSubregionEasternAsia                 UNRegionOrSubregion = "Eastern Asia"
	UNRegionOrSubregionEasternEurope               UNRegionOrSubregion = "Eastern Europe"
	UNRegionOrSubregionEurope                      UNRegionOrSubregion = "Europe"
	UNRegionOrSubregionLatinAmericaAndTheCaribbean UNRegionOrSubregion = "Latin America and the Caribbean"
	UNRegionOrSubregionMelanesia                   UNRegionOrSubregion = "Melanesia"
	UNRegionOrSubregionMicronesia                  UNRegionOrSubregion = "Micronesia"
	UNRegionOrSubregionNorthernAfrica              UNRegionOrSubregion = "Northern Africa"
	UNRegionOrSubregionNorthernAmerica             UNRegionOrSubregion = "Northern America"
	UNRegionOrSubregionNorthernEurope              UNRegionOrSubregion = "Northern Europe"
	UNRegionOrSubregionOceania                     UNRegionOrSubregion = "Oceania"
	UNRegionOrSubregionPolynesia                   UNRegionOrSubregion = "Polynesia"
	UNRegionOrSubregionSouthEasternAsia            UNRegionOrSubregion = "South-eastern Asia"
	UNRegionOrSubregionSouthernAsia                UNRegionOrSubregion = "Southern Asia"
	UNRegionOrSubregionSouthernEurope              UNRegionOrSubregion = "Southern Europe"
	UNRegionOrSubregionSubSaharanAfrica            UNRegionOrSubregion = "Sub-Saharan Africa"
	UNRegionOrSubregionWesternAsia                 UNRegionOrSubregion = "Western Asia"
	UNRegionOrSubregionWesternEurope               UNRegionOrSubregion = "Western Europe"
)

// AccessDenied Response with an error code of `AccessDenied`. See Chapter "Error Codes" of the Tech Specs for mor details.
type AccessDenied struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// Assurance Data Type "Assurance" of Spec Version 2
type Assurance struct {
	Assurance    bool               `json:"assurance"`
	Boundary     *AssuranceBoundary `json:"boundary"`
	Comments     *string            `json:"comments"`
	CompletedAt  *time.Time         `json:"completedAt"`
	Coverage     *AssuranceCoverage `json:"coverage"`
	Level        *AssuranceLevel    `json:"level"`
	ProviderName string             `json:"providerName"`
	StandardName *string            `json:"standardName"`
}

// AssuranceBoundary defines model for AssuranceBoundary.
type AssuranceBoundary string

// AssuranceCoverage defines model for AssuranceCoverage.
type AssuranceCoverage string

// AssuranceLevel defines model for AssuranceLevel.
type AssuranceLevel string

// BadRequest Response with an error code of `BadRequest`. See Chapter "Error Codes" of the Tech Specs for mor details.
type BadRequest struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// BiogenicAccountingMethodology defines model for BiogenicAccountingMethodology.
type BiogenicAccountingMethodology string

// CarbonFootprint Data Type "CarbonFootprint" of Spec Version 2
type CarbonFootprint struct {
	AircraftGhgEmissions          *PositiveDecimal               `json:"aircraftGhgEmissions"`
	AllocationRulesDescription    *string                        `json:"allocationRulesDescription"`
	Assurance                     *Assurance                     `json:"assurance"`
	BiogenicAccountingMethodology *BiogenicAccountingMethodology `json:"biogenicAccountingMethodology"`
	BiogenicCarbonContent         PositiveDecimal                `json:"biogenicCarbonContent"`
	BiogenicCarbonWithdrawal      *NegativeDecimal               `json:"biogenicCarbonWithdrawal"`
	BoundaryProcessesDescription  string                         `json:"boundaryProcessesDescription"`
	CharacterizationFactors       CharacterizationFactors        `json:"characterizationFactors"`
	CrossSectoralStandardsUsed    CrossSectoralStandardSet       `json:"crossSectoralStandardsUsed"`
	DLucGhgEmissions              *PositiveDecimal               `json:"dLucGhgEmissions"`

	// DeclaredUnit Data Type "DeclaredUnit" of Spec Version 2
	DeclaredUnit                 DeclaredUnit             `json:"declaredUnit"`
	Dqi                          *DataQualityIndicators   `json:"dqi"`
	ExemptedEmissionsDescription string                   `json:"exemptedEmissionsDescription"`
	ExemptedEmissionsPercent     ExemptedEmissionsPercent `json:"exemptedEmissionsPercent"`
	FossilCarbonContent          PositiveDecimal          `json:"fossilCarbonContent"`
	FossilGhgEmissions           PositiveDecimal          `json:"fossilGhgEmissions"`
	GeographyCountry             *ISO3166CC               `json:"geographyCountry,omitempty"`
	GeographyCountrySubdivision  *NonEmptyString          `json:"geographyCountrySubdivision,omitempty"`

	// GeographyRegionOrSubregion List of UN regions and subregions
	GeographyRegionOrSubregion         *UNRegionOrSubregion               `json:"geographyRegionOrSubregion,omitempty"`
	ILucGhgEmissions                   *PositiveDecimal                   `json:"iLucGhgEmissions"`
	IpccCharacterizationFactorsSources IpccCharacterizationFactorsSources `json:"ipccCharacterizationFactorsSources"`
	LandManagementGhgEmissions         *PositiveDecimal                   `json:"landManagementGhgEmissions"`
	OtherBiogenicGhgEmissions          *PositiveDecimal                   `json:"otherBiogenicGhgEmissions"`
	PCfExcludingBiogenic               PositiveDecimal                    `json:"pCfExcludingBiogenic"`
	PCfIncludingBiogenic               *Decimal                           `json:"pCfIncludingBiogenic"`
	PackagingEmissionsIncluded         bool                               `json:"packagingEmissionsIncluded"`
	PackagingGhgEmissions              *PositiveDecimal                   `json:"packagingGhgEmissions"`
	PrimaryDataShare                   *Percent                           `json:"primaryDataShare"`
	ProductOrSectorSpecificRules       *ProductOrSectorSpecificRuleSet    `json:"productOrSectorSpecificRules"`
	ReferencePeriodEnd                 time.Time                          `json:"referencePeriodEnd"`
	ReferencePeriodStart               time.Time                          `json:"referencePeriodStart"`
	SecondaryEmissionFactorSources     *EmissionFactorDSSet               `json:"secondaryEmissionFactorSources"`
	UncertaintyAssessmentDescription   *string                            `json:"uncertaintyAssessmentDescription"`
	UnitaryProductAmount               StrictlyPositiveDecimal            `json:"unitaryProductAmount"`
}

// CharacterizationFactors defines model for CharacterizationFactors.
type CharacterizationFactors string

// CompanyIDSet defines model for CompanyIdSet.
type CompanyIDSet = []string

// CrossSectoralStandard Deprecated Data Type "CrossSectoralStandard" of Spec Version 2, to be removed in v3, used in `CrossSectoralStandardsSet`s to populate `crossSectoralSectoralStandardsUsed` (also deprecated).
type CrossSectoralStandard string

// CrossSectoralStandardSet defines model for CrossSectoralStandardSet.
type CrossSectoralStandardSet = []CrossSectoralStandard

// DataModelExtension defines model for DataModelExtension.
type DataModelExtension struct {
	Data          map[string]interface{} `json:"data"`
	DataSchema    string                 `json:"dataSchema"`
	Documentation *string                `json:"documentation,omitempty"`
	SpecVersion   VersionString          `json:"specVersion"`
}

// DataQualityIndicators Data Type "DataQualityIndicators" of Spec Version 2
type DataQualityIndicators struct {
	CompletenessDQR  FloatBetween1And3 `json:"completenessDQR"`
	CoveragePercent  Percent           `json:"coveragePercent"`
	GeographicalDQR  FloatBetween1And3 `json:"geographicalDQR"`
	ReliabilityDQR   FloatBetween1And3 `json:"reliabilityDQR"`
	TechnologicalDQR FloatBetween1And3 `json:"technologicalDQR"`
	TemporalDQR      FloatBetween1And3 `json:"temporalDQR"`
}

// Decimal defines model for Decimal.
type Decimal = string

// DeclaredUnit Data Type "DeclaredUnit" of Spec Version 2
type DeclaredUnit string

// EmissionFactorDS defines model for EmissionFactorDS.
type EmissionFactorDS struct {
	Name    NonEmptyString `json:"name"`
	Version NonEmptyString `json:"version"`
}

// EmissionFactorDSSet defines model for EmissionFactorDSSet.
type EmissionFactorDSSet = []struct {
	Name    NonEmptyString `json:"name"`
	Version NonEmptyString `json:"version"`
}

// ExemptedEmissionsPercent defines model for ExemptedEmissionsPercent.
type ExemptedEmissionsPercent = float64

// Feedstock defines model for Feedstock.
type Feedstock struct {
	Feedstock           FeedstockType `json:"feedstock"`
	FeedstockPercentage *Decimal      `json:"feedstockPercentage"`
	RegionProvenance    *string       `json:"regionProvenance"`
}

// FeedstockType defines model for FeedstockType.
type FeedstockType string

// FloatBetween1And3 defines model for FloatBetween1And3.
type FloatBetween1And3 = float32

// GenericURN defines model for GenericURN.
type GenericURN = string

// GlecDistance defines model for GlecDistance.
type GlecDistance struct {
	union json.RawMessage
}

// GlecDistance0 defines model for .
type GlecDistance0 struct {
	Actual Decimal `json:"actual"`
}

// GlecDistance1 defines model for .
type GlecDistance1 struct {
	Gcd Decimal `json:"gcd"`
}

// GlecDistance2 defines model for .
type GlecDistance2 struct {
	Sfd Decimal `json:"sfd"`
}

// ISO3166CC defines model for ISO3166CC.
type ISO3166CC = string

// IataCode defines model for IataCode.
type IataCode = string

// IpccCharacterizationFactorsSource defines model for IpccCharacterizationFactorsSource.
type IpccCharacterizationFactorsSource = string

// IpccCharacterizationFactorsSources defines model for IpccCharacterizationFactorsSources.
type IpccCharacterizationFactorsSources = []string

// Location defines model for Location.
type Location struct {
	City    string    `json:"city"`
	Country ISO3166CC `json:"country"`
	Iata    *IataCode `json:"iata"`
	Lat     *Decimal  `json:"lat"`
	Lng     *Decimal  `json:"lng"`
	Locode  *Locode   `json:"locode"`
	Street  *string   `json:"street"`
	Uic     *UicCode  `json:"uic"`
	Zip     *string   `json:"zip"`
}

// Locode defines model for Locode.
type Locode = string

// NegativeDecimal defines model for NegativeDecimal.
type NegativeDecimal = string

// NonEmptyPfIDVec defines model for NonEmptyPfIdVec.
type NonEmptyPfIDVec = []string

// NonEmptyString defines model for NonEmptyString.
type NonEmptyString = string

// NonEmptyStringVec defines model for NonEmptyStringVec.
type NonEmptyStringVec = []string

// PFRequestEventBody defines model for PFRequestEventBody.
type PFRequestEventBody struct {
	Comment *string     `json:"comment"`
	Pf      interface{} `json:"pf"`
}

// PFUpdateEventBody defines model for PFUpdateEventBody.
type PFUpdateEventBody struct {
	PfIds []PfID `json:"pfIds"`
}

// PackagingOrTrEqType defines model for PackagingOrTrEqType.
type PackagingOrTrEqType string

// PathfinderEvent possible contents of `data` property of events - see tech specs section 6 for details
type PathfinderEvent struct {
	ID          string    `json:"id"`
	Source      string    `json:"source"`
	Specversion string    `json:"specversion"`
	Time        time.Time `json:"time"`
	union       json.RawMessage
}

// PathfinderEvent0 the contents of the `data` field of a `PF Update Event` – see Tech Specs section 6.8.3
type PathfinderEvent0 struct {
	Data PFUpdateEventBody    `json:"data"`
	Type PathfinderEvent0Type `json:"type"`
}

// PathfinderEvent0Type defines model for PathfinderEvent.0.Type.
type PathfinderEvent0Type string

// PathfinderEvent1 the contents of the `data` field of a `PF Request Event` – see Tech Specs section 6.8.4.1
type PathfinderEvent1 struct {
	Data PFRequestEventBody   `json:"data"`
	Type PathfinderEvent1Type `json:"type"`
}

// PathfinderEvent1Type defines model for PathfinderEvent.1.Type.
type PathfinderEvent1Type string

// Percent defines model for Percent.
type Percent = float64

// PfID defines model for PfId.
type PfID = string

// PfIDParam defines model for PfIdParam.
type PfIDParam = PfID

// PfListingResponseInner HTTP Body of Action `ListFootprints`
type PfListingResponseInner struct {
	Data []ProductFootprintForILeapType `json:"data"`
}

// PfStatus defines model for PfStatus.
type PfStatus string

// PositiveDecimal defines model for PositiveDecimal.
type PositiveDecimal = string

// ProductFootprintResponse HTTP Body of Action `GetFootprint`
type ProductFootprintResponse struct {
	// Data Data Type "ProductFootprint" of Tech Spec Version 2
	Data ProductFootprintForILeapType `json:"data"`
}

// ProductFootprintForILeapType Data Type "ProductFootprint" of Tech Spec Version 2
type ProductFootprintForILeapType struct {
	Comment     string                `json:"comment"`
	CompanyIds  CompanyIDSet          `json:"companyIds"`
	CompanyName NonEmptyString        `json:"companyName"`
	Created     time.Time             `json:"created"`
	Extensions  *[]DataModelExtension `json:"extensions"`
	ID          PfID                  `json:"id"`

	// Pcf Data Type "CarbonFootprint" of Spec Version 2
	Pcf                 CarbonFootprint  `json:"pcf"`
	PrecedingPfIds      *NonEmptyPfIDVec `json:"precedingPfIds"`
	ProductCategoryCpc  NonEmptyString   `json:"productCategoryCpc"`
	ProductDescription  string           `json:"productDescription"`
	ProductIds          ProductIDSet     `json:"productIds"`
	ProductNameCompany  NonEmptyString   `json:"productNameCompany"`
	SpecVersion         VersionString    `json:"specVersion"`
	Status              PfStatus         `json:"status"`
	StatusComment       *string          `json:"statusComment"`
	Updated             *time.Time       `json:"updated"`
	ValidityPeriodEnd   *time.Time       `json:"validityPeriodEnd"`
	ValidityPeriodStart *time.Time       `json:"validityPeriodStart"`
	Version             VersionInteger   `json:"version"`
}

// ProductIDSet defines model for ProductIdSet.
type ProductIDSet = []string

// ProductOrSectorSpecificRule defines model for ProductOrSectorSpecificRule.
type ProductOrSectorSpecificRule struct {
	Operator          ProductOrSectorSpecificRuleOperator `json:"operator"`
	OtherOperatorName *NonEmptyString                     `json:"otherOperatorName"`
	RuleNames         NonEmptyStringVec                   `json:"ruleNames"`
}

// ProductOrSectorSpecificRuleOperator defines model for ProductOrSectorSpecificRuleOperator.
type ProductOrSectorSpecificRuleOperator string

// ProductOrSectorSpecificRuleSet defines model for ProductOrSectorSpecificRuleSet.
type ProductOrSectorSpecificRuleSet = []struct {
	Operator          ProductOrSectorSpecificRuleOperator `json:"operator"`
	OtherOperatorName *NonEmptyString                     `json:"otherOperatorName"`
	RuleNames         NonEmptyStringVec                   `json:"ruleNames"`
}

// StrictlyPositiveDecimal defines model for StrictlyPositiveDecimal.
type StrictlyPositiveDecimal = string

// TAD Data Type "Transport Activity Data" of the iLEAP Technical Specifications
type TAD struct {
	ActivityID            string               `json:"activityId"`
	ArrivalAt             *time.Time           `json:"arrivalAt"`
	ConsignmentIds        []string             `json:"consignmentIds"`
	DepartureAt           *time.Time           `json:"departureAt"`
	Destination           Location             `json:"destination"`
	Distance              GlecDistance         `json:"distance"`
	EmptyDistanceFactor   *Decimal             `json:"emptyDistanceFactor"`
	Feedstocks            *[]Feedstock         `json:"feedstocks"`
	LoadFactor            *Decimal             `json:"loadFactor"`
	Mass                  *Decimal             `json:"mass"`
	Mode                  *TransportMode       `json:"mode"`
	Origin                Location             `json:"origin"`
	PackagingOrTrEqAmount *uint                `json:"packagingOrTrEqAmount"`
	PackagingOrTrEqType   *PackagingOrTrEqType `json:"packagingOrTrEqType"`
}

// TadListingResponseInner HTTP Body of Action `TransportActivityData`
type TadListingResponseInner struct {
	Data []TAD `json:"data"`
}

// TransportMode defines model for TransportMode.
type TransportMode string

// UNRegionOrSubregion List of UN regions and subregions
type UNRegionOrSubregion string

// UicCode defines model for UicCode.
type UicCode = string

// Unauthorized Response with an error code of `Unauthorized`, used for iLEAP TransportActivityData
type Unauthorized struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// VersionInteger defines model for VersionInteger.
type VersionInteger = int32

// VersionString defines model for VersionString.
type VersionString = string

// AsGlecDistance0 returns the union data inside the GlecDistance as a GlecDistance0
func (t GlecDistance) AsGlecDistance0() (GlecDistance0, error) {
	var body GlecDistance0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGlecDistance0 overwrites any union data inside the GlecDistance as the provided GlecDistance0
func (t *GlecDistance) FromGlecDistance0(v GlecDistance0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGlecDistance0 performs a merge with any union data inside the GlecDistance, using the provided GlecDistance0
func (t *GlecDistance) MergeGlecDistance0(v GlecDistance0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGlecDistance1 returns the union data inside the GlecDistance as a GlecDistance1
func (t GlecDistance) AsGlecDistance1() (GlecDistance1, error) {
	var body GlecDistance1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGlecDistance1 overwrites any union data inside the GlecDistance as the provided GlecDistance1
func (t *GlecDistance) FromGlecDistance1(v GlecDistance1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGlecDistance1 performs a merge with any union data inside the GlecDistance, using the provided GlecDistance1
func (t *GlecDistance) MergeGlecDistance1(v GlecDistance1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGlecDistance2 returns the union data inside the GlecDistance as a GlecDistance2
func (t GlecDistance) AsGlecDistance2() (GlecDistance2, error) {
	var body GlecDistance2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGlecDistance2 overwrites any union data inside the GlecDistance as the provided GlecDistance2
func (t *GlecDistance) FromGlecDistance2(v GlecDistance2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGlecDistance2 performs a merge with any union data inside the GlecDistance, using the provided GlecDistance2
func (t *GlecDistance) MergeGlecDistance2(v GlecDistance2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GlecDistance) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GlecDistance) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPathfinderEvent0 returns the union data inside the PathfinderEvent as a PathfinderEvent0
func (t PathfinderEvent) AsPathfinderEvent0() (PathfinderEvent0, error) {
	var body PathfinderEvent0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPathfinderEvent0 overwrites any union data inside the PathfinderEvent as the provided PathfinderEvent0
func (t *PathfinderEvent) FromPathfinderEvent0(v PathfinderEvent0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePathfinderEvent0 performs a merge with any union data inside the PathfinderEvent, using the provided PathfinderEvent0
func (t *PathfinderEvent) MergePathfinderEvent0(v PathfinderEvent0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPathfinderEvent1 returns the union data inside the PathfinderEvent as a PathfinderEvent1
func (t PathfinderEvent) AsPathfinderEvent1() (PathfinderEvent1, error) {
	var body PathfinderEvent1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPathfinderEvent1 overwrites any union data inside the PathfinderEvent as the provided PathfinderEvent1
func (t *PathfinderEvent) FromPathfinderEvent1(v PathfinderEvent1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePathfinderEvent1 performs a merge with any union data inside the PathfinderEvent, using the provided PathfinderEvent1
func (t *PathfinderEvent) MergePathfinderEvent1(v PathfinderEvent1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PathfinderEvent) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["id"], err = json.Marshal(t.ID)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'id': %w", err)
	}

	object["source"], err = json.Marshal(t.Source)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'source': %w", err)
	}

	object["specversion"], err = json.Marshal(t.Specversion)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'specversion': %w", err)
	}

	object["time"], err = json.Marshal(t.Time)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'time': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *PathfinderEvent) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &t.ID)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
	}

	if raw, found := object["source"]; found {
		err = json.Unmarshal(raw, &t.Source)
		if err != nil {
			return fmt.Errorf("error reading 'source': %w", err)
		}
	}

	if raw, found := object["specversion"]; found {
		err = json.Unmarshal(raw, &t.Specversion)
		if err != nil {
			return fmt.Errorf("error reading 'specversion': %w", err)
		}
	}

	if raw, found := object["time"]; found {
		err = json.Unmarshal(raw, &t.Time)
		if err != nil {
			return fmt.Errorf("error reading 'time': %w", err)
		}
	}

	return err
}
